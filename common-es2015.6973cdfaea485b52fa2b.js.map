{"version":3,"sources":["webpack:///Users/schintha/Developer/Work/SPA/ngx-starter-kit/node_modules/ngx-auto-unsubscribe/dist/auto-unsubscribe.js"],"names":["isFunction","fn","doUnsubscribe","subscription","unsubscribe","doUnsubscribeIfArray","subscriptionsArray","Array","isArray","forEach","AutoUnsubscribe","_a","_b","_c","blackList","_d","arrayName","_e","event","constructor","original","prototype","Error","name","apply","this","arguments","propName","includes","property"],"mappings":"6HAAA,IAAIA,EAAa,SAAUC,GAAM,MAAqB,mBAAPA,GAC3CC,EAAgB,SAAUC,GAC1BA,GACIH,EAAWG,EAAaC,cACxBD,EAAaC,eAEjBC,EAAuB,SAAUC,GACjCC,MAAMC,QAAQF,IACVA,EAAmBG,QAAQP,IAE5B,SAASQ,EAAgBC,GAC5B,IAAIC,OAAY,IAAPD,EAAgB,GAAKA,EAAIE,EAAKD,EAAGE,UAAWA,OAAmB,IAAPD,EAAgB,GAAKA,EAAIE,EAAKH,EAAGI,UAAWA,OAAmB,IAAPD,EAAgB,GAAKA,EAAIE,EAAKL,EAAGM,MAAOA,OAAe,IAAPD,EAAgB,cAAgBA,EACzM,OAAO,SAAUE,GACb,IAAIC,EAAWD,EAAYE,UAAUH,GACrC,IAAKlB,EAAWoB,GACZ,MAAM,IAAIE,MAAMH,EAAYI,KAAO,+DAEvCJ,EAAYE,UAAUH,GAAS,WAE3B,GADAlB,EAAWoB,IAAaA,EAASI,MAAMC,KAAMC,WACzCV,EACAX,EAAqBoB,KAAKT,SAG9B,IAAK,IAAIW,KAAYF,KACjB,IAAIX,EAAUc,SAASD,GAAvB,CAEA,IAAIE,EAAWJ,KAAKE,GACpBzB,EAAc2B","file":"x","sourcesContent":["var isFunction = function (fn) { return typeof fn === \"function\"; };\nvar doUnsubscribe = function (subscription) {\n    subscription &&\n        isFunction(subscription.unsubscribe) &&\n        subscription.unsubscribe();\n};\nvar doUnsubscribeIfArray = function (subscriptionsArray) {\n    Array.isArray(subscriptionsArray) &&\n        subscriptionsArray.forEach(doUnsubscribe);\n};\nexport function AutoUnsubscribe(_a) {\n    var _b = _a === void 0 ? {} : _a, _c = _b.blackList, blackList = _c === void 0 ? [] : _c, _d = _b.arrayName, arrayName = _d === void 0 ? \"\" : _d, _e = _b.event, event = _e === void 0 ? \"ngOnDestroy\" : _e;\n    return function (constructor) {\n        var original = constructor.prototype[event];\n        if (!isFunction(original)) {\n            throw new Error(constructor.name + \" is using @AutoUnsubscribe but does not implement OnDestroy\");\n        }\n        constructor.prototype[event] = function () {\n            isFunction(original) && original.apply(this, arguments);\n            if (arrayName) {\n                doUnsubscribeIfArray(this[arrayName]);\n                return;\n            }\n            for (var propName in this) {\n                if (blackList.includes(propName))\n                    continue;\n                var property = this[propName];\n                doUnsubscribe(property);\n            }\n        };\n    };\n}\n//# sourceMappingURL=auto-unsubscribe.js.map"]}