{"version":3,"sources":["webpack:///Users/schintha/Developer/Work/SPA/ngx-starter-kit/node_modules/@ngx-formly/material/__ivy_ngcc__/fesm2015/ngx-formly-material-form-field.js","webpack:///Users/schintha/Developer/Work/SPA/ngx-starter-kit/node_modules/@ngx-formly/material/__ivy_ngcc__/fesm2015/ngx-formly-material-input.js","webpack:///Users/schintha/Developer/Work/SPA/ngx-starter-kit/node_modules/@ngx-formly/material/__ivy_ngcc__/fesm2015/ngx-formly-material-textarea.js","webpack:///Users/schintha/Developer/Work/SPA/ngx-starter-kit/node_modules/@ngx-formly/core/__ivy_ngcc__/fesm2015/ngx-formly-core-select.js","webpack:///Users/schintha/Developer/Work/SPA/ngx-starter-kit/node_modules/@ngx-formly/material/__ivy_ngcc__/fesm2015/ngx-formly-material-radio.js","webpack:///Users/schintha/Developer/Work/SPA/ngx-starter-kit/node_modules/@ngx-formly/material/__ivy_ngcc__/fesm2015/ngx-formly-material-checkbox.js","webpack:///Users/schintha/Developer/Work/SPA/ngx-starter-kit/node_modules/@ngx-formly/material/__ivy_ngcc__/fesm2015/ngx-formly-material-multicheckbox.js","webpack:///Users/schintha/Developer/Work/SPA/ngx-starter-kit/node_modules/@ngx-formly/material/__ivy_ngcc__/fesm2015/ngx-formly-material-select.js","webpack:///Users/schintha/Developer/Work/SPA/ngx-starter-kit/node_modules/@ngx-formly/material/__ivy_ngcc__/fesm2015/ngx-formly-material.js","webpack:///Users/schintha/Developer/Work/SPA/ngx-starter-kit/libs/admin/src/lib/services/notification.service.ts","webpack:///Users/schintha/Developer/Work/SPA/ngx-starter-kit/libs/admin/src/lib/components/notification-detail/notification-detail.component.html","webpack:///Users/schintha/Developer/Work/SPA/ngx-starter-kit/libs/admin/src/lib/components/notification-detail/notification-detail.component.ts","webpack:///Users/schintha/Developer/Work/SPA/ngx-starter-kit/libs/admin/src/lib/services/subscription.service.ts","webpack:///Users/schintha/Developer/Work/SPA/ngx-starter-kit/libs/admin/src/lib/components/subscription-detail/subscription-detail.component.html","webpack:///Users/schintha/Developer/Work/SPA/ngx-starter-kit/libs/admin/src/lib/components/subscription-detail/subscription-detail.component.ts","webpack:///Users/schintha/Developer/Work/SPA/ngx-starter-kit/libs/admin/src/lib/containers/admin-layout/admin-layout.component.ts","webpack:///Users/schintha/Developer/Work/SPA/ngx-starter-kit/libs/admin/src/lib/containers/admin-layout/admin-layout.component.html","webpack:///Users/schintha/Developer/Work/SPA/ngx-starter-kit/libs/admin/src/lib/components/notification-edit/notification-edit.component.ts","webpack:///Users/schintha/Developer/Work/SPA/ngx-starter-kit/libs/admin/src/lib/components/notification-edit/notification-edit.component.html","webpack:///Users/schintha/Developer/Work/SPA/ngx-starter-kit/libs/admin/src/lib/containers/notifications/notifications.component.html","webpack:///Users/schintha/Developer/Work/SPA/ngx-starter-kit/libs/admin/src/lib/containers/notifications/notifications.component.ts","webpack:///Users/schintha/Developer/Work/SPA/ngx-starter-kit/libs/admin/src/lib/containers/overview/overview.component.ts","webpack:///Users/schintha/Developer/Work/SPA/ngx-starter-kit/libs/admin/src/lib/containers/overview/overview.component.html","webpack:///Users/schintha/Developer/Work/SPA/ngx-starter-kit/libs/admin/src/lib/containers/subscriptions/subscriptions.component.html","webpack:///Users/schintha/Developer/Work/SPA/ngx-starter-kit/libs/admin/src/lib/containers/subscriptions/subscriptions.component.ts","webpack:///Users/schintha/Developer/Work/SPA/ngx-starter-kit/libs/admin/src/lib/admin.module.ts"],"names":["_c0","_c1","_c2","FormlyWrapperFormField_mat_label_3_span_2_Template","rf","ctx","FormlyWrapperFormField_mat_label_3_Template","ctx_r19","to","label","required","hideRequiredMarker","FormlyWrapperFormField_ng_container_5_Template","FormlyWrapperFormField_ng_container_7_Template","FormlyWrapperFormField_mat_hint_10_Template","ctx_r22","description","FormlyErrorStateMatcher","field","this","control","form","showError","FieldType$1","super","arguments","errorStateMatcher","stateChanges","Subject","_errorState","_control","formField","formFieldControl","matPrefix","matSuffix","setTimeout","_markForCheck","complete","ids","event","focus","next","type","constructor","name","disabled","placeholder","shouldLabelFloat","formControl","value","patchValue","focused","empty","ɵfac","t","ɵFieldType$1_BaseFactory","ɵdir","viewQuery","_t","first","features","FormlyWrapperFormField","config","renderer","elementRef","focusMonitor","initialGapCalculated","ref","resolveFieldTypeRef","formlyField","instance","console","warn","componentType","hide","appearance","monitor","subscribe","origin","updateOutlineGap","hideFieldUnderline","underlineElement","_elementRef","nativeElement","querySelector","removeChild","parentNode","__formField__","stopMonitoring","ɵcmp","selectors","fieldComponent","provide","useExisting","decls","vars","consts","template","floatLabel","color","hideLabel","prefix","_matprefix","suffix","_matsuffix","directives","encapsulation","FormlyMatFormFieldModule","ɵmod","ɵinj","factory","imports","forChild","wrappers","component","FormlyFieldInput_input_0_Template","ctx_r3","id","readonly","tabindex","FormlyFieldInput_ng_template_1_Template","ctx_r5","FormlyFieldInput","ɵFormlyFieldInput_BaseFactory","_r4","FormlyMatInputModule","types","FormlyFieldTextArea","defaultOptions","templateOptions","cols","rows","ɵFormlyFieldTextArea_BaseFactory","autosize","autosizeMinRows","autosizeMaxRows","FormlyMatTextAreaModule","FormlySelectOptionsPipe","options","Observable","of","pipe","map","toOptions","gOptions","groups","_flatOptions","option","getGroupProp","push","group","toOption","item","getLabelProp","getValueProp","getDisabledProp","labelProp","shouldUseLegacyOption","valueProp","key","disabledProp","groupProp","ɵpipe","pure","FormlySelectModule","FormlyFieldRadio_mat_radio_button_1_Template","option_r25","$implicit","i_r26","index","ctx_r24","labelPosition","FormlyFieldRadio","radioGroup","_radios","radioButton","some","el","contains","length","selected","onContainerClick","ɵFormlyFieldRadio_BaseFactory","pipes","FormlyMatRadioModule","FormlyFieldCheckbox_span_2_Template","FormlyFieldCheckbox","indeterminate","align","checkbox","ɵFormlyFieldCheckbox_BaseFactory","FormlyMatCheckboxModule","FormlyFieldMultiCheckbox_ng_container_0_Template","_r5","$event","option_r2","onChange","checked","i_r3","ctx_r1","isChecked","FormlyFieldMultiCheckbox","filter","o","Object","assign","markAsTouched","checkboxes","indexOf","ɵFormlyFieldMultiCheckbox_BaseFactory","FormlyMatMultiCheckboxModule","FormlyFieldSelect_ng_template_0_Template","_r7","selectOptions_r5","selectOptions","toggleSelectAll","getSelectAllState","selectAllOption","a0","FormlyFieldSelect_ng_container_3_ng_container_1_Template","selectOptions_r8","ngIf","_r2","FormlyFieldSelect_ng_container_3_ng_container_2_mat_optgroup_1_mat_option_1_Template","child_r16","FormlyFieldSelect_ng_container_3_ng_container_2_mat_optgroup_1_Template","item_r12","FormlyFieldSelect_ng_container_3_ng_container_2_mat_option_2_Template","FormlyFieldSelect_ng_container_3_ng_container_2_Template","FormlyFieldSelect_ng_container_3_Template","ctx_r4","multiple","FormlyFieldSelect","getSelectAllValue","selectAllValue","setValue","change","o1","o2","attributes","_labelId","flatOptions","forEach","ɵFormlyFieldSelect_BaseFactory","compareWith","_getAriaLabelledby","disableOptionCentering","FormlyMatSelectModule","FormlyMaterialModule","NotificationService","httpClient","baseUrl","environment","API_BASE_URL","entityPath","params","set","loadingSubject","get","retry","catchError","handleError","finalize","data","items","delete","post","NotificationDetailComponent","notificationService","route","animationTrigger$","BehaviorSubject","sub","getById","notification","unsubscribe","SubscriptionService","SubscriptionDetailComponent","subscriptionService","subscription","AdminLayoutComponent","store","window","quickpanelOpen","crumbs$","select","state","Array","from","breadcrumbs","link","depth$","depth","componentRef","onActivate","enumToOptions","enumType","keys","NotificationEditComponent","dialogRef","fb","ngOnInit","entityForm","model","fields","submit","stopPropagation","onSend","NotificationsComponent","dialog","snack","confirmService","showActionColumn","showColumnFilter","showToolbar","formRef","columns","property","header","sticky","displayFn","entity","formatDistance","stringToDate","createdAt","Date","addSuffix","updatedAt","sendTpl","confirm","confirmed","mergeMap","_","tap","open","duration","dispatch","error","throwError","row","send","native","target","targetType","ALL","WARN","icon","NOTIFICATIONS","isNew","getNewEntity","width","disableClose","title","payload","afterClosed","res","concatMap","updateOrCreate","OverviewComponent","SubscriptionsComponent","deleteTpl","username","matModules","AdminModule","path","canActivate","roles","children"],"mappings":"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","file":"x","sourcesContent":["import { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MatFormField, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { ViewChild, Type, Component, Renderer2, ElementRef, ViewContainerRef, NgModule } from '@angular/core';\nimport { FieldType, ɵdefineHiddenProp, FieldWrapper, FormlyConfig, FormlyModule } from '@ngx-formly/core';\nimport { Subject } from 'rxjs';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@ngx-formly/core';\nimport * as ɵngcc2 from '@angular/cdk/a11y';\nimport * as ɵngcc3 from '@angular/material/form-field';\nimport * as ɵngcc4 from '@angular/common';\n\nconst _c0 = [\"matPrefix\"];\nconst _c1 = [\"matSuffix\"];\nconst _c2 = [\"fieldComponent\"];\nfunction FormlyWrapperFormField_mat_label_3_span_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 10);\n    ɵngcc0.ɵɵtext(1, \"*\");\n    ɵngcc0.ɵɵelementEnd();\n} }\nfunction FormlyWrapperFormField_mat_label_3_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mat-label\");\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵtemplate(2, FormlyWrapperFormField_mat_label_3_span_2_Template, 2, 0, \"span\", 9);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r19 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r19.to.label, \" \");\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r19.to.required && ctx_r19.to.hideRequiredMarker !== true);\n} }\nfunction FormlyWrapperFormField_ng_container_5_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n} }\nfunction FormlyWrapperFormField_ng_container_7_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n} }\nfunction FormlyWrapperFormField_mat_hint_10_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mat-hint\", 6);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r22 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"id\", null);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r22.to.description);\n} }\nclass FormlyErrorStateMatcher {\n    /**\n     * @param {?} field\n     */\n    constructor(field) {\n        this.field = field;\n    }\n    /**\n     * @param {?} control\n     * @param {?} form\n     * @return {?}\n     */\n    isErrorState(control, form) {\n        return this.field && this.field.showError;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @abstract\n * @template F\n */\nclass FieldType$1 extends FieldType {\n    constructor() {\n        super(...arguments);\n        this.errorStateMatcher = new FormlyErrorStateMatcher(this);\n        this.stateChanges = new Subject();\n        this._errorState = false;\n    }\n    /**\n     * @return {?}\n     */\n    get formFieldControl() { return this._control || this; }\n    /**\n     * @param {?} control\n     * @return {?}\n     */\n    set formFieldControl(control) {\n        this._control = control;\n        if (this.formField && control !== this.formField._control) {\n            this.formField._control = control;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        if (this.formField) {\n            this.formField._control = this.formFieldControl;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        if (this.matPrefix || this.matSuffix) {\n            setTimeout((/**\n             * @return {?}\n             */\n            () => {\n                ɵdefineHiddenProp(this.field, '_matprefix', this.matPrefix);\n                ɵdefineHiddenProp(this.field, '_matsuffix', this.matSuffix);\n                ((/** @type {?} */ (this.options)))._markForCheck(this.field);\n            }));\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this.formField) {\n            delete this.formField._control;\n        }\n        this.stateChanges.complete();\n    }\n    /**\n     * @param {?} ids\n     * @return {?}\n     */\n    setDescribedByIds(ids) { }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    onContainerClick(event) {\n        this.field.focus = true;\n        this.stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n    get errorState() {\n        /** @type {?} */\n        const showError = (/** @type {?} */ ((/** @type {?} */ (this.options)).showError))(this);\n        if (showError !== this._errorState) {\n            this._errorState = showError;\n            this.stateChanges.next();\n        }\n        return showError;\n    }\n    /**\n     * @return {?}\n     */\n    get controlType() {\n        if (this.to.type) {\n            return this.to.type;\n        }\n        if (((/** @type {?} */ (this.field.type))) instanceof Type) {\n            return (/** @type {?} */ (this.field.type)).constructor.name;\n        }\n        return (/** @type {?} */ (this.field.type));\n    }\n    /**\n     * @return {?}\n     */\n    get focused() { return !!this.field.focus && !this.disabled; }\n    /**\n     * @return {?}\n     */\n    get disabled() { return !!this.to.disabled; }\n    /**\n     * @return {?}\n     */\n    get required() { return !!this.to.required; }\n    /**\n     * @return {?}\n     */\n    get placeholder() { return this.to.placeholder || ''; }\n    /**\n     * @return {?}\n     */\n    get shouldPlaceholderFloat() { return this.shouldLabelFloat; }\n    /**\n     * @return {?}\n     */\n    get value() { return this.formControl.value; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set value(value) { this.formControl.patchValue(value); }\n    /**\n     * @return {?}\n     */\n    get ngControl() { return (/** @type {?} */ (this.formControl)); }\n    /**\n     * @return {?}\n     */\n    get empty() { return this.value === undefined || this.value === null || this.value === ''; }\n    /**\n     * @return {?}\n     */\n    get shouldLabelFloat() { return this.focused || !this.empty; }\n    /**\n     * @return {?}\n     */\n    get formField() { return this.field ? ((/** @type {?} */ (this.field)))['__formField__'] : null; }\n}\nFieldType$1.ɵfac = function FieldType$1_Factory(t) { return ɵFieldType$1_BaseFactory(t || FieldType$1); };\nFieldType$1.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: FieldType$1, viewQuery: function FieldType$1_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n        ɵngcc0.ɵɵviewQuery(_c1, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.matPrefix = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.matSuffix = _t.first);\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nFieldType$1.propDecorators = {\n    matPrefix: [{ type: ViewChild, args: ['matPrefix',] }],\n    matSuffix: [{ type: ViewChild, args: ['matSuffix',] }]\n};\nconst ɵFieldType$1_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(FieldType$1);\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FormlyWrapperFormField extends FieldWrapper {\n    /**\n     * @param {?} config\n     * @param {?} renderer\n     * @param {?} elementRef\n     * @param {?} focusMonitor\n     */\n    constructor(config, renderer, elementRef, focusMonitor) {\n        super();\n        this.config = config;\n        this.renderer = renderer;\n        this.elementRef = elementRef;\n        this.focusMonitor = focusMonitor;\n        this.stateChanges = new Subject();\n        this._errorState = false;\n        this.initialGapCalculated = false;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this.formField._control = this;\n        ɵdefineHiddenProp(this.field, '__formField__', this.formField);\n        /** @type {?} */\n        const ref = this.config.resolveFieldTypeRef(this.formlyField);\n        if (ref && !(ref.instance instanceof FieldType$1)) {\n            console.warn(`Component '${ref.componentType.name}' must extend 'FieldType' from '@ngx-formly/material/form-field'.`);\n        }\n        // fix for https://github.com/angular/material2/issues/11437\n        if (this.formlyField.hide && (/** @type {?} */ (this.formlyField.templateOptions)).appearance === 'outline') {\n            this.initialGapCalculated = true;\n        }\n        this.focusMonitor.monitor(this.elementRef, true).subscribe((/**\n         * @param {?} origin\n         * @return {?}\n         */\n        origin => {\n            if (!origin && this.field.focus) {\n                this.field.focus = false;\n            }\n            this.stateChanges.next();\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentChecked() {\n        if (!this.initialGapCalculated || this.formlyField.hide) {\n            return;\n        }\n        this.formField.updateOutlineGap();\n        this.initialGapCalculated = true;\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        // temporary fix for https://github.com/angular/material2/issues/7891\n        if (this.formField.appearance !== 'outline' && this.to.hideFieldUnderline === true) {\n            /** @type {?} */\n            const underlineElement = this.formField._elementRef.nativeElement.querySelector('.mat-form-field-underline');\n            underlineElement && this.renderer.removeChild(underlineElement.parentNode, underlineElement);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        delete this.formlyField.__formField__;\n        this.stateChanges.complete();\n        this.focusMonitor.stopMonitoring(this.elementRef);\n    }\n    /**\n     * @param {?} ids\n     * @return {?}\n     */\n    setDescribedByIds(ids) { }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    onContainerClick(event) {\n        this.formlyField.focus = true;\n        this.stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n    get errorState() {\n        /** @type {?} */\n        const showError = (/** @type {?} */ ((/** @type {?} */ (this.options)).showError))(this);\n        if (showError !== this._errorState) {\n            this._errorState = showError;\n            this.stateChanges.next();\n        }\n        return showError;\n    }\n    /**\n     * @return {?}\n     */\n    get controlType() { return this.to.type; }\n    /**\n     * @return {?}\n     */\n    get focused() { return !!this.formlyField.focus && !this.disabled; }\n    /**\n     * @return {?}\n     */\n    get disabled() { return !!this.to.disabled; }\n    /**\n     * @return {?}\n     */\n    get required() { return !!this.to.required; }\n    /**\n     * @return {?}\n     */\n    get placeholder() { return this.to.placeholder || ''; }\n    /**\n     * @return {?}\n     */\n    get shouldPlaceholderFloat() { return this.shouldLabelFloat; }\n    /**\n     * @return {?}\n     */\n    get value() { return this.formControl.value; }\n    /**\n     * @return {?}\n     */\n    get ngControl() { return (/** @type {?} */ (this.formControl)); }\n    /**\n     * @return {?}\n     */\n    get empty() { return !this.formControl.value; }\n    /**\n     * @return {?}\n     */\n    get shouldLabelFloat() { return this.focused || !this.empty; }\n    /**\n     * @return {?}\n     */\n    get formlyField() { return (/** @type {?} */ (this.field)); }\n}\nFormlyWrapperFormField.ɵfac = function FormlyWrapperFormField_Factory(t) { return new (t || FormlyWrapperFormField)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FormlyConfig), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FocusMonitor)); };\nFormlyWrapperFormField.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FormlyWrapperFormField, selectors: [[\"formly-wrapper-mat-form-field\"]], viewQuery: function FormlyWrapperFormField_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵstaticViewQuery(_c2, true, ViewContainerRef);\n        ɵngcc0.ɵɵstaticViewQuery(MatFormField, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.fieldComponent = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.formField = _t.first);\n    } }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MatFormFieldControl, useExisting: FormlyWrapperFormField }]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 11, vars: 12, consts: [[3, \"hideRequiredMarker\", \"floatLabel\", \"appearance\", \"color\"], [\"fieldComponent\", \"\"], [4, \"ngIf\"], [\"matPrefix\", \"\"], [4, \"ngTemplateOutlet\"], [\"matSuffix\", \"\"], [3, \"id\"], [3, \"field\"], [3, \"id\", 4, \"ngIf\"], [\"class\", \"mat-form-field-required-marker\", 4, \"ngIf\"], [1, \"mat-form-field-required-marker\"]], template: function FormlyWrapperFormField_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"mat-form-field\", 0);\n        ɵngcc0.ɵɵelementContainer(1, null, 1);\n        ɵngcc0.ɵɵtemplate(3, FormlyWrapperFormField_mat_label_3_Template, 3, 2, \"mat-label\", 2);\n        ɵngcc0.ɵɵelementContainerStart(4, 3);\n        ɵngcc0.ɵɵtemplate(5, FormlyWrapperFormField_ng_container_5_Template, 1, 0, \"ng-container\", 4);\n        ɵngcc0.ɵɵelementContainerEnd();\n        ɵngcc0.ɵɵelementContainerStart(6, 5);\n        ɵngcc0.ɵɵtemplate(7, FormlyWrapperFormField_ng_container_7_Template, 1, 0, \"ng-container\", 4);\n        ɵngcc0.ɵɵelementContainerEnd();\n        ɵngcc0.ɵɵelementStart(8, \"mat-error\", 6);\n        ɵngcc0.ɵɵelement(9, \"formly-validation-message\", 7);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(10, FormlyWrapperFormField_mat_hint_10_Template, 2, 2, \"mat-hint\", 8);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"width\", \"100%\");\n        ɵngcc0.ɵɵproperty(\"hideRequiredMarker\", true)(\"floatLabel\", ctx.to.floatLabel)(\"appearance\", ctx.to.appearance)(\"color\", ctx.to.color);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.to.label && ctx.to.hideLabel !== true);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx.to.prefix ? ctx.to.prefix : ctx.formlyField._matprefix);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx.to.suffix ? ctx.to.suffix : ctx.formlyField._matsuffix);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"id\", null);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"field\", ctx.field);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.to.description);\n    } }, directives: [ɵngcc3.MatFormField, ɵngcc4.NgIf, ɵngcc3.MatPrefix, ɵngcc4.NgTemplateOutlet, ɵngcc3.MatSuffix, ɵngcc3.MatError, ɵngcc1.ɵc, ɵngcc3.MatLabel, ɵngcc3.MatHint], encapsulation: 2 });\n/** @nocollapse */\nFormlyWrapperFormField.ctorParameters = () => [\n    { type: FormlyConfig },\n    { type: Renderer2 },\n    { type: ElementRef },\n    { type: FocusMonitor }\n];\nFormlyWrapperFormField.propDecorators = {\n    fieldComponent: [{ type: ViewChild, args: ['fieldComponent', (/** @type {?} */ ({ read: ViewContainerRef, static: true })),] }],\n    formField: [{ type: ViewChild, args: [MatFormField, (/** @type {?} */ ({ static: true })),] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlyWrapperFormField, [{\n        type: Component,\n        args: [{\n                selector: 'formly-wrapper-mat-form-field',\n                template: `\n    <!-- fix https://github.com/angular/material2/pull/7083 by setting width to 100% -->\n    <mat-form-field\n      [hideRequiredMarker]=\"true\"\n      [floatLabel]=\"to.floatLabel\"\n      [appearance]=\"to.appearance\"\n      [color]=\"to.color\"\n      [style.width]=\"'100%'\">\n      <ng-container #fieldComponent></ng-container>\n      <mat-label *ngIf=\"to.label && to.hideLabel !== true\">\n        {{ to.label }}\n        <span *ngIf=\"to.required && to.hideRequiredMarker !== true\" class=\"mat-form-field-required-marker\">*</span>\n      </mat-label>\n\n      <ng-container matPrefix>\n        <ng-container *ngTemplateOutlet=\"to.prefix ? to.prefix : formlyField._matprefix\"></ng-container>\n      </ng-container>\n\n      <ng-container matSuffix>\n        <ng-container *ngTemplateOutlet=\"to.suffix ? to.suffix : formlyField._matsuffix\"></ng-container>\n      </ng-container>\n\n      <!-- fix https://github.com/angular/material2/issues/7737 by setting id to null  -->\n      <mat-error [id]=\"null\">\n        <formly-validation-message [field]=\"field\"></formly-validation-message>\n      </mat-error>\n      <!-- fix https://github.com/angular/material2/issues/7737 by setting id to null  -->\n      <mat-hint *ngIf=\"to.description\" [id]=\"null\">{{ to.description }}</mat-hint>\n    </mat-form-field>\n  `,\n                providers: [{ provide: MatFormFieldControl, useExisting: FormlyWrapperFormField }]\n            }]\n    }], function () { return [{ type: ɵngcc1.FormlyConfig }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }, { type: ɵngcc2.FocusMonitor }]; }, { fieldComponent: [{\n            type: ViewChild,\n            args: ['fieldComponent', ( /** @type {?} */({ read: ViewContainerRef, static: true }))]\n        }], formField: [{\n            type: ViewChild,\n            args: [MatFormField, ( /** @type {?} */({ static: true }))]\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FormlyMatFormFieldModule {\n}\nFormlyMatFormFieldModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: FormlyMatFormFieldModule });\nFormlyMatFormFieldModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function FormlyMatFormFieldModule_Factory(t) { return new (t || FormlyMatFormFieldModule)(); }, imports: [[\n            CommonModule,\n            ReactiveFormsModule,\n            MatFormFieldModule,\n            FormlyModule.forChild({\n                wrappers: [{\n                        name: 'form-field',\n                        component: FormlyWrapperFormField\n                    }]\n            }),\n        ]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FormlyMatFormFieldModule, { declarations: function () { return [FormlyWrapperFormField]; }, imports: function () { return [CommonModule,\n        ReactiveFormsModule,\n        MatFormFieldModule, ɵngcc1.FormlyModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlyMatFormFieldModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [FormlyWrapperFormField],\n                imports: [\n                    CommonModule,\n                    ReactiveFormsModule,\n                    MatFormFieldModule,\n                    FormlyModule.forChild({\n                        wrappers: [{\n                                name: 'form-field',\n                                component: FormlyWrapperFormField\n                            }]\n                    }),\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { FormlyMatFormFieldModule, FieldType$1 as FieldType, FormlyWrapperFormField as ɵa };\n\n//# sourceMappingURL=ngx-formly-material-form-field.js.map","import { CommonModule } from '@angular/common';\nimport { FormlyModule } from '@ngx-formly/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { Component, ViewChild, NgModule } from '@angular/core';\nimport { MatInput, MatInputModule } from '@angular/material/input';\nimport { FieldType, FormlyMatFormFieldModule } from '@ngx-formly/material/form-field';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/material/input';\nimport * as ɵngcc3 from '@angular/forms';\nimport * as ɵngcc4 from '@ngx-formly/core';\n\nfunction FormlyFieldInput_input_0_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"input\", 2);\n} if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r3.id)(\"readonly\", ctx_r3.to.readonly)(\"type\", ctx_r3.type || \"text\")(\"errorStateMatcher\", ctx_r3.errorStateMatcher)(\"formControl\", ctx_r3.formControl)(\"formlyAttributes\", ctx_r3.field)(\"tabindex\", ctx_r3.to.tabindex || 0)(\"placeholder\", ctx_r3.to.placeholder);\n} }\nfunction FormlyFieldInput_ng_template_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"input\", 3);\n} if (rf & 2) {\n    const ctx_r5 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r5.id)(\"readonly\", ctx_r5.to.readonly)(\"errorStateMatcher\", ctx_r5.errorStateMatcher)(\"formControl\", ctx_r5.formControl)(\"formlyAttributes\", ctx_r5.field)(\"tabindex\", ctx_r5.to.tabindex || 0)(\"placeholder\", ctx_r5.to.placeholder);\n} }\nclass FormlyFieldInput extends FieldType {\n    /**\n     * @return {?}\n     */\n    get type() {\n        return this.to.type || 'text';\n    }\n}\nFormlyFieldInput.ɵfac = function FormlyFieldInput_Factory(t) { return ɵFormlyFieldInput_BaseFactory(t || FormlyFieldInput); };\nFormlyFieldInput.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FormlyFieldInput, selectors: [[\"formly-field-mat-input\"]], viewQuery: function FormlyFieldInput_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵstaticViewQuery(MatInput, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.formFieldControl = _t.first);\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 2, consts: [[\"matInput\", \"\", 3, \"id\", \"readonly\", \"type\", \"errorStateMatcher\", \"formControl\", \"formlyAttributes\", \"tabindex\", \"placeholder\", 4, \"ngIf\", \"ngIfElse\"], [\"numberTmp\", \"\"], [\"matInput\", \"\", 3, \"id\", \"readonly\", \"type\", \"errorStateMatcher\", \"formControl\", \"formlyAttributes\", \"tabindex\", \"placeholder\"], [\"matInput\", \"\", \"type\", \"number\", 3, \"id\", \"readonly\", \"errorStateMatcher\", \"formControl\", \"formlyAttributes\", \"tabindex\", \"placeholder\"]], template: function FormlyFieldInput_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, FormlyFieldInput_input_0_Template, 1, 8, \"input\", 0);\n        ɵngcc0.ɵɵtemplate(1, FormlyFieldInput_ng_template_1_Template, 1, 7, \"ng-template\", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);\n    } if (rf & 2) {\n        const _r4 = ɵngcc0.ɵɵreference(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.type !== \"number\")(\"ngIfElse\", _r4);\n    } }, directives: [ɵngcc1.NgIf, ɵngcc2.MatInput, ɵngcc3.DefaultValueAccessor, ɵngcc3.NgControlStatus, ɵngcc3.FormControlDirective, ɵngcc4.FormlyAttributes, ɵngcc3.NumberValueAccessor], encapsulation: 2 });\nFormlyFieldInput.propDecorators = {\n    formFieldControl: [{ type: ViewChild, args: [MatInput, (/** @type {?} */ ({ static: true })),] }]\n};\nconst ɵFormlyFieldInput_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(FormlyFieldInput);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlyFieldInput, [{\n        type: Component,\n        args: [{\n                selector: 'formly-field-mat-input',\n                template: `\n    <input *ngIf=\"type !== 'number'; else numberTmp\"\n      matInput\n      [id]=\"id\"\n      [readonly]=\"to.readonly\"\n      [type]=\"type || 'text'\"\n      [errorStateMatcher]=\"errorStateMatcher\"\n      [formControl]=\"formControl\"\n      [formlyAttributes]=\"field\"\n      [tabindex]=\"to.tabindex || 0\"\n      [placeholder]=\"to.placeholder\">\n    <ng-template #numberTmp>\n      <input matInput\n             [id]=\"id\"\n             type=\"number\"\n             [readonly]=\"to.readonly\"\n             [errorStateMatcher]=\"errorStateMatcher\"\n             [formControl]=\"formControl\"\n             [formlyAttributes]=\"field\"\n             [tabindex]=\"to.tabindex || 0\"\n             [placeholder]=\"to.placeholder\">\n    </ng-template>\n  `\n            }]\n    }], null, { formFieldControl: [{\n            type: ViewChild,\n            args: [MatInput, ( /** @type {?} */({ static: true }))]\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FormlyMatInputModule {\n}\nFormlyMatInputModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: FormlyMatInputModule });\nFormlyMatInputModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function FormlyMatInputModule_Factory(t) { return new (t || FormlyMatInputModule)(); }, imports: [[\n            CommonModule,\n            ReactiveFormsModule,\n            MatInputModule,\n            FormlyMatFormFieldModule,\n            FormlyModule.forChild({\n                types: [\n                    {\n                        name: 'input',\n                        component: FormlyFieldInput,\n                        wrappers: ['form-field']\n                    },\n                ]\n            }),\n        ]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FormlyMatInputModule, { declarations: function () { return [FormlyFieldInput]; }, imports: function () { return [CommonModule,\n        ReactiveFormsModule,\n        MatInputModule,\n        FormlyMatFormFieldModule, ɵngcc4.FormlyModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlyMatInputModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [FormlyFieldInput],\n                imports: [\n                    CommonModule,\n                    ReactiveFormsModule,\n                    MatInputModule,\n                    FormlyMatFormFieldModule,\n                    FormlyModule.forChild({\n                        types: [\n                            {\n                                name: 'input',\n                                component: FormlyFieldInput,\n                                wrappers: ['form-field']\n                            },\n                        ]\n                    }),\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { FormlyMatInputModule, FormlyFieldInput };\n\n//# sourceMappingURL=ngx-formly-material-input.js.map","import { CommonModule } from '@angular/common';\nimport { FormlyModule } from '@ngx-formly/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { Component, ViewChild, NgModule } from '@angular/core';\nimport { MatInput, MAT_INPUT_VALUE_ACCESSOR, MatInputModule } from '@angular/material/input';\nimport { FieldType, FormlyMatFormFieldModule } from '@ngx-formly/material/form-field';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/material/input';\nimport * as ɵngcc2 from '@angular/forms';\nimport * as ɵngcc3 from '@angular/cdk/text-field';\nimport * as ɵngcc4 from '@ngx-formly/core';\nclass FormlyFieldTextArea extends FieldType {\n    constructor() {\n        super(...arguments);\n        this.defaultOptions = {\n            templateOptions: {\n                cols: 1,\n                rows: 1,\n            },\n        };\n    }\n}\nFormlyFieldTextArea.ɵfac = function FormlyFieldTextArea_Factory(t) { return ɵFormlyFieldTextArea_BaseFactory(t || FormlyFieldTextArea); };\nFormlyFieldTextArea.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FormlyFieldTextArea, selectors: [[\"formly-field-mat-textarea\"]], viewQuery: function FormlyFieldTextArea_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵstaticViewQuery(MatInput, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.formFieldControl = _t.first);\n    } }, features: [ɵngcc0.ɵɵProvidersFeature([\n            // fix for https://github.com/ngx-formly/ngx-formly/issues/1688\n            // rely on formControl value instead of elementRef which return empty value in Firefox.\n            { provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: FormlyFieldTextArea },\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 2, vars: 15, consts: [[\"matInput\", \"\", 3, \"id\", \"readonly\", \"formControl\", \"errorStateMatcher\", \"cols\", \"rows\", \"formlyAttributes\", \"placeholder\", \"tabindex\", \"cdkTextareaAutosize\", \"cdkAutosizeMinRows\", \"cdkAutosizeMaxRows\"]], template: function FormlyFieldTextArea_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"textarea\", 0);\n        ɵngcc0.ɵɵtext(1, \"    \");\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"cdk-textarea-autosize\", ctx.to.autosize);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.id)(\"readonly\", ctx.to.readonly)(\"formControl\", ctx.formControl)(\"errorStateMatcher\", ctx.errorStateMatcher)(\"cols\", ctx.to.cols)(\"rows\", ctx.to.rows)(\"formlyAttributes\", ctx.field)(\"placeholder\", ctx.to.placeholder)(\"tabindex\", ctx.to.tabindex || 0)(\"readonly\", ctx.to.readonly)(\"cdkTextareaAutosize\", ctx.to.autosize)(\"cdkAutosizeMinRows\", ctx.to.autosizeMinRows)(\"cdkAutosizeMaxRows\", ctx.to.autosizeMaxRows);\n    } }, directives: [ɵngcc1.MatInput, ɵngcc2.DefaultValueAccessor, ɵngcc3.CdkTextareaAutosize, ɵngcc2.NgControlStatus, ɵngcc2.FormControlDirective, ɵngcc4.FormlyAttributes], encapsulation: 2 });\nFormlyFieldTextArea.propDecorators = {\n    formFieldControl: [{ type: ViewChild, args: [MatInput, (/** @type {?} */ ({ static: true })),] }]\n};\nconst ɵFormlyFieldTextArea_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(FormlyFieldTextArea);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlyFieldTextArea, [{\n        type: Component,\n        args: [{\n                selector: 'formly-field-mat-textarea',\n                template: `\n    <textarea matInput\n      [id]=\"id\"\n      [readonly]=\"to.readonly\"\n      [formControl]=\"formControl\"\n      [errorStateMatcher]=\"errorStateMatcher\"\n      [cols]=\"to.cols\"\n      [rows]=\"to.rows\"\n      [formlyAttributes]=\"field\"\n      [placeholder]=\"to.placeholder\"\n      [tabindex]=\"to.tabindex || 0\"\n      [readonly]=\"to.readonly\"\n      [cdkTextareaAutosize]=\"to.autosize\"\n      [cdkAutosizeMinRows]=\"to.autosizeMinRows\"\n      [cdkAutosizeMaxRows]=\"to.autosizeMaxRows\"\n      [class.cdk-textarea-autosize]=\"to.autosize\"\n      >\n    </textarea>\n  `,\n                providers: [\n                    // fix for https://github.com/ngx-formly/ngx-formly/issues/1688\n                    // rely on formControl value instead of elementRef which return empty value in Firefox.\n                    { provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: FormlyFieldTextArea },\n                ]\n            }]\n    }], null, { formFieldControl: [{\n            type: ViewChild,\n            args: [MatInput, ( /** @type {?} */({ static: true }))]\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FormlyMatTextAreaModule {\n}\nFormlyMatTextAreaModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: FormlyMatTextAreaModule });\nFormlyMatTextAreaModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function FormlyMatTextAreaModule_Factory(t) { return new (t || FormlyMatTextAreaModule)(); }, imports: [[\n            CommonModule,\n            ReactiveFormsModule,\n            MatInputModule,\n            FormlyMatFormFieldModule,\n            FormlyModule.forChild({\n                types: [\n                    {\n                        name: 'textarea',\n                        component: FormlyFieldTextArea,\n                        wrappers: ['form-field']\n                    },\n                ]\n            }),\n        ]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FormlyMatTextAreaModule, { declarations: function () { return [FormlyFieldTextArea]; }, imports: function () { return [CommonModule,\n        ReactiveFormsModule,\n        MatInputModule,\n        FormlyMatFormFieldModule, ɵngcc4.FormlyModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlyMatTextAreaModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [FormlyFieldTextArea],\n                imports: [\n                    CommonModule,\n                    ReactiveFormsModule,\n                    MatInputModule,\n                    FormlyMatFormFieldModule,\n                    FormlyModule.forChild({\n                        types: [\n                            {\n                                name: 'textarea',\n                                component: FormlyFieldTextArea,\n                                wrappers: ['form-field']\n                            },\n                        ]\n                    }),\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { FormlyMatTextAreaModule, FormlyFieldTextArea };\n\n//# sourceMappingURL=ngx-formly-material-textarea.js.map","import { Pipe, NgModule } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nimport * as ɵngcc0 from '@angular/core';\nclass FormlySelectOptionsPipe {\n    /**\n     * @param {?} options\n     * @param {?=} field\n     * @return {?}\n     */\n    transform(options, field) {\n        if (!(options instanceof Observable)) {\n            options = of(options);\n        }\n        return ((/** @type {?} */ (options))).pipe(map((/**\n         * @param {?} value\n         * @return {?}\n         */\n        value => this.toOptions(value, field || {}))));\n    }\n    /**\n     * @private\n     * @param {?} options\n     * @param {?} field\n     * @return {?}\n     */\n    toOptions(options, field) {\n        /** @type {?} */\n        const gOptions = [];\n        /** @type {?} */\n        const groups = {};\n        /** @type {?} */\n        const to = field.templateOptions || {};\n        to._flatOptions = true;\n        options.map((/**\n         * @param {?} option\n         * @return {?}\n         */\n        (option) => {\n            if (!this.getGroupProp(option, to)) {\n                gOptions.push(this.toOption(option, to));\n            }\n            else {\n                to._flatOptions = false;\n                if (!groups[this.getGroupProp(option, to)]) {\n                    groups[this.getGroupProp(option, to)] = [];\n                    gOptions.push({\n                        label: this.getGroupProp(option, to),\n                        group: groups[this.getGroupProp(option, to)],\n                    });\n                }\n                groups[this.getGroupProp(option, to)].push(this.toOption(option, to));\n            }\n        }));\n        return gOptions;\n    }\n    /**\n     * @private\n     * @param {?} item\n     * @param {?} to\n     * @return {?}\n     */\n    toOption(item, to) {\n        return {\n            label: this.getLabelProp(item, to),\n            value: this.getValueProp(item, to),\n            disabled: this.getDisabledProp(item, to) || false,\n        };\n    }\n    /**\n     * @private\n     * @param {?} item\n     * @param {?} to\n     * @return {?}\n     */\n    getLabelProp(item, to) {\n        if (typeof to.labelProp === 'function') {\n            return to.labelProp(item);\n        }\n        if (this.shouldUseLegacyOption(item, to)) {\n            console.warn(`NgxFormly: legacy select option '{key, value}' is deprecated since v5.5, use '{value, label}' instead.`);\n            return item.value;\n        }\n        return item[to.labelProp || 'label'];\n    }\n    /**\n     * @private\n     * @param {?} item\n     * @param {?} to\n     * @return {?}\n     */\n    getValueProp(item, to) {\n        if (typeof to.valueProp === 'function') {\n            return to.valueProp(item);\n        }\n        if (this.shouldUseLegacyOption(item, to)) {\n            return item.key;\n        }\n        return item[to.valueProp || 'value'];\n    }\n    /**\n     * @private\n     * @param {?} item\n     * @param {?} to\n     * @return {?}\n     */\n    getDisabledProp(item, to) {\n        if (typeof to.disabledProp === 'function') {\n            return to.disabledProp(item);\n        }\n        return item[to.disabledProp || 'disabled'];\n    }\n    /**\n     * @private\n     * @param {?} item\n     * @param {?} to\n     * @return {?}\n     */\n    getGroupProp(item, to) {\n        if (typeof to.groupProp === 'function') {\n            return to.groupProp(item);\n        }\n        return item[to.groupProp || 'group'];\n    }\n    /**\n     * @private\n     * @param {?} item\n     * @param {?} to\n     * @return {?}\n     */\n    shouldUseLegacyOption(item, to) {\n        return !to.valueProp\n            && !to.labelProp\n            && item != null\n            && typeof item === 'object'\n            && 'key' in item\n            && 'value' in item;\n    }\n}\nFormlySelectOptionsPipe.ɵfac = function FormlySelectOptionsPipe_Factory(t) { return new (t || FormlySelectOptionsPipe)(); };\nFormlySelectOptionsPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: \"formlySelectOptions\", type: FormlySelectOptionsPipe, pure: true });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlySelectOptionsPipe, [{\n        type: Pipe,\n        args: [{ name: 'formlySelectOptions' }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FormlySelectModule {\n}\nFormlySelectModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: FormlySelectModule });\nFormlySelectModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function FormlySelectModule_Factory(t) { return new (t || FormlySelectModule)(); } });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FormlySelectModule, { declarations: [FormlySelectOptionsPipe], exports: [FormlySelectOptionsPipe] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlySelectModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [FormlySelectOptionsPipe],\n                exports: [FormlySelectOptionsPipe]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { FormlySelectModule, FormlySelectOptionsPipe as ɵa };\n\n//# sourceMappingURL=ngx-formly-core-select.js.map","import { CommonModule } from '@angular/common';\nimport { FormlyModule } from '@ngx-formly/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { FormlySelectModule } from '@ngx-formly/core/select';\nimport { Component, ViewChild, NgModule } from '@angular/core';\nimport { FieldType, FormlyMatFormFieldModule } from '@ngx-formly/material/form-field';\nimport { MatRadioGroup, MatRadioModule } from '@angular/material/radio';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/material/radio';\nimport * as ɵngcc2 from '@angular/forms';\nimport * as ɵngcc3 from '@ngx-formly/core';\nimport * as ɵngcc4 from '@angular/common';\nimport * as ɵngcc5 from '@ngx-formly/core/select';\n\nfunction FormlyFieldRadio_mat_radio_button_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mat-radio-button\", 2);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const option_r25 = ctx.$implicit;\n    const i_r26 = ctx.index;\n    const ctx_r24 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r24.id + \"_\" + i_r26)(\"color\", ctx_r24.to.color)(\"labelPosition\", ctx_r24.to.labelPosition)(\"value\", option_r25.value);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", option_r25.label, \" \");\n} }\nclass FormlyFieldRadio extends FieldType {\n    constructor() {\n        super(...arguments);\n        this.defaultOptions = {\n            templateOptions: {\n                hideFieldUnderline: true,\n                floatLabel: 'always',\n                options: [],\n                tabindex: -1,\n            },\n        };\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    onContainerClick(event) {\n        /** @type {?} */\n        const isRadioClick = this.radioGroup._radios\n            .map((/**\n         * @param {?} radioButton\n         * @return {?}\n         */\n        radioButton => (/** @type {?} */ (radioButton._elementRef.nativeElement))))\n            .some((/**\n         * @param {?} el\n         * @return {?}\n         */\n        el => el.contains((/** @type {?} */ (event.target)))));\n        if (!isRadioClick && this.radioGroup._radios.length && !this.radioGroup.selected) {\n            this.radioGroup._radios.first.focus();\n        }\n        super.onContainerClick(event);\n    }\n}\nFormlyFieldRadio.ɵfac = function FormlyFieldRadio_Factory(t) { return ɵFormlyFieldRadio_BaseFactory(t || FormlyFieldRadio); };\nFormlyFieldRadio.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FormlyFieldRadio, selectors: [[\"formly-field-mat-radio\"]], viewQuery: function FormlyFieldRadio_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(MatRadioGroup, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.radioGroup = _t.first);\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 4, vars: 9, consts: [[3, \"formControl\", \"formlyAttributes\", \"tabindex\"], [3, \"id\", \"color\", \"labelPosition\", \"value\", 4, \"ngFor\", \"ngForOf\"], [3, \"id\", \"color\", \"labelPosition\", \"value\"]], template: function FormlyFieldRadio_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"mat-radio-group\", 0);\n        ɵngcc0.ɵɵtemplate(1, FormlyFieldRadio_mat_radio_button_1_Template, 2, 5, \"mat-radio-button\", 1);\n        ɵngcc0.ɵɵpipe(2, \"async\");\n        ɵngcc0.ɵɵpipe(3, \"formlySelectOptions\");\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"formControl\", ctx.formControl)(\"formlyAttributes\", ctx.field)(\"tabindex\", ctx.to.tabindex);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ɵngcc0.ɵɵpipeBind1(2, 4, ɵngcc0.ɵɵpipeBind2(3, 6, ctx.to.options, ctx.field)));\n    } }, directives: [ɵngcc1.MatRadioGroup, ɵngcc2.NgControlStatus, ɵngcc2.FormControlDirective, ɵngcc3.FormlyAttributes, ɵngcc4.NgForOf, ɵngcc1.MatRadioButton], pipes: [ɵngcc4.AsyncPipe, ɵngcc5.ɵa], encapsulation: 2 });\nFormlyFieldRadio.propDecorators = {\n    radioGroup: [{ type: ViewChild, args: [MatRadioGroup,] }]\n};\nconst ɵFormlyFieldRadio_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(FormlyFieldRadio);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlyFieldRadio, [{\n        type: Component,\n        args: [{\n                selector: 'formly-field-mat-radio',\n                template: `\n    <mat-radio-group\n      [formControl]=\"formControl\"\n      [formlyAttributes]=\"field\"\n      [tabindex]=\"to.tabindex\">\n      <mat-radio-button *ngFor=\"let option of to.options | formlySelectOptions:field | async; let i = index;\"\n        [id]=\"id + '_' + i\"\n        [color]=\"to.color\"\n        [labelPosition]=\"to.labelPosition\"\n        [value]=\"option.value\">\n        {{ option.label }}\n      </mat-radio-button>\n    </mat-radio-group>\n  `\n            }]\n    }], null, { radioGroup: [{\n            type: ViewChild,\n            args: [MatRadioGroup]\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FormlyMatRadioModule {\n}\nFormlyMatRadioModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: FormlyMatRadioModule });\nFormlyMatRadioModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function FormlyMatRadioModule_Factory(t) { return new (t || FormlyMatRadioModule)(); }, imports: [[\n            CommonModule,\n            ReactiveFormsModule,\n            MatRadioModule,\n            FormlyMatFormFieldModule,\n            FormlySelectModule,\n            FormlyModule.forChild({\n                types: [{\n                        name: 'radio',\n                        component: FormlyFieldRadio,\n                        wrappers: ['form-field']\n                    }]\n            }),\n        ]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FormlyMatRadioModule, { declarations: function () { return [FormlyFieldRadio]; }, imports: function () { return [CommonModule,\n        ReactiveFormsModule,\n        MatRadioModule,\n        FormlyMatFormFieldModule,\n        FormlySelectModule, ɵngcc3.FormlyModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlyMatRadioModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [FormlyFieldRadio],\n                imports: [\n                    CommonModule,\n                    ReactiveFormsModule,\n                    MatRadioModule,\n                    FormlyMatFormFieldModule,\n                    FormlySelectModule,\n                    FormlyModule.forChild({\n                        types: [{\n                                name: 'radio',\n                                component: FormlyFieldRadio,\n                                wrappers: ['form-field']\n                            }]\n                    }),\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { FormlyMatRadioModule, FormlyFieldRadio };\n\n//# sourceMappingURL=ngx-formly-material-radio.js.map","import { CommonModule } from '@angular/common';\nimport { FormlyModule } from '@ngx-formly/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { Component, ViewChild, NgModule } from '@angular/core';\nimport { FieldType, FormlyMatFormFieldModule } from '@ngx-formly/material/form-field';\nimport { MatCheckbox, MatCheckboxModule } from '@angular/material/checkbox';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/material/checkbox';\nimport * as ɵngcc2 from '@angular/forms';\nimport * as ɵngcc3 from '@ngx-formly/core';\nimport * as ɵngcc4 from '@angular/common';\n\nfunction FormlyFieldCheckbox_span_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 2);\n    ɵngcc0.ɵɵtext(1, \"*\");\n    ɵngcc0.ɵɵelementEnd();\n} }\nclass FormlyFieldCheckbox extends FieldType {\n    constructor() {\n        super(...arguments);\n        this.defaultOptions = {\n            templateOptions: {\n                hideFieldUnderline: true,\n                indeterminate: true,\n                floatLabel: 'always',\n                hideLabel: true,\n                align: 'start',\n                // start or end\n                color: 'accent',\n            },\n        };\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    onContainerClick(event) {\n        this.checkbox.focus();\n        super.onContainerClick(event);\n    }\n}\nFormlyFieldCheckbox.ɵfac = function FormlyFieldCheckbox_Factory(t) { return ɵFormlyFieldCheckbox_BaseFactory(t || FormlyFieldCheckbox); };\nFormlyFieldCheckbox.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FormlyFieldCheckbox, selectors: [[\"formly-field-mat-checkbox\"]], viewQuery: function FormlyFieldCheckbox_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(MatCheckbox, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.checkbox = _t.first);\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 9, consts: [[3, \"formControl\", \"id\", \"formlyAttributes\", \"tabindex\", \"indeterminate\", \"color\", \"labelPosition\"], [\"class\", \"mat-form-field-required-marker\", 4, \"ngIf\"], [1, \"mat-form-field-required-marker\"]], template: function FormlyFieldCheckbox_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"mat-checkbox\", 0);\n        ɵngcc0.ɵɵtext(1);\n        ɵngcc0.ɵɵtemplate(2, FormlyFieldCheckbox_span_2_Template, 2, 0, \"span\", 1);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"formControl\", ctx.formControl)(\"id\", ctx.id)(\"formlyAttributes\", ctx.field)(\"tabindex\", ctx.to.tabindex || 0)(\"indeterminate\", ctx.to.indeterminate && ctx.formControl.value === null)(\"color\", ctx.to.color)(\"labelPosition\", ctx.to.align || ctx.to.labelPosition);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵtextInterpolate1(\" \", ctx.to.label, \" \");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.to.required && ctx.to.hideRequiredMarker !== true);\n    } }, directives: [ɵngcc1.MatCheckbox, ɵngcc2.NgControlStatus, ɵngcc2.FormControlDirective, ɵngcc3.FormlyAttributes, ɵngcc4.NgIf], encapsulation: 2 });\nFormlyFieldCheckbox.propDecorators = {\n    checkbox: [{ type: ViewChild, args: [MatCheckbox,] }]\n};\nconst ɵFormlyFieldCheckbox_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(FormlyFieldCheckbox);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlyFieldCheckbox, [{\n        type: Component,\n        args: [{\n                selector: 'formly-field-mat-checkbox',\n                template: `\n    <mat-checkbox\n      [formControl]=\"formControl\"\n      [id]=\"id\"\n      [formlyAttributes]=\"field\"\n      [tabindex]=\"to.tabindex || 0\"\n      [indeterminate]=\"to.indeterminate && formControl.value === null\"\n      [color]=\"to.color\"\n      [labelPosition]=\"to.align || to.labelPosition\">\n      {{ to.label }}\n      <span *ngIf=\"to.required && to.hideRequiredMarker !== true\" class=\"mat-form-field-required-marker\">*</span>\n    </mat-checkbox>\n  `\n            }]\n    }], null, { checkbox: [{\n            type: ViewChild,\n            args: [MatCheckbox]\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FormlyMatCheckboxModule {\n}\nFormlyMatCheckboxModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: FormlyMatCheckboxModule });\nFormlyMatCheckboxModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function FormlyMatCheckboxModule_Factory(t) { return new (t || FormlyMatCheckboxModule)(); }, imports: [[\n            CommonModule,\n            ReactiveFormsModule,\n            MatCheckboxModule,\n            FormlyMatFormFieldModule,\n            FormlyModule.forChild({\n                types: [\n                    {\n                        name: 'checkbox',\n                        component: FormlyFieldCheckbox,\n                        wrappers: ['form-field']\n                    },\n                ]\n            }),\n        ]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FormlyMatCheckboxModule, { declarations: function () { return [FormlyFieldCheckbox]; }, imports: function () { return [CommonModule,\n        ReactiveFormsModule,\n        MatCheckboxModule,\n        FormlyMatFormFieldModule, ɵngcc3.FormlyModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlyMatCheckboxModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [FormlyFieldCheckbox],\n                imports: [\n                    CommonModule,\n                    ReactiveFormsModule,\n                    MatCheckboxModule,\n                    FormlyMatFormFieldModule,\n                    FormlyModule.forChild({\n                        types: [\n                            {\n                                name: 'checkbox',\n                                component: FormlyFieldCheckbox,\n                                wrappers: ['form-field']\n                            },\n                        ]\n                    }),\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { FormlyMatCheckboxModule, FormlyFieldCheckbox };\n\n//# sourceMappingURL=ngx-formly-material-checkbox.js.map","import { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { FormlyModule } from '@ngx-formly/core';\nimport { FormlySelectModule } from '@ngx-formly/core/select';\nimport { Component, ViewChildren, NgModule } from '@angular/core';\nimport { FieldType, FormlyMatFormFieldModule } from '@ngx-formly/material/form-field';\nimport { MatCheckbox, MatCheckboxModule } from '@angular/material/checkbox';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/material/checkbox';\nimport * as ɵngcc3 from '@ngx-formly/core';\nimport * as ɵngcc4 from '@ngx-formly/core/select';\n\nfunction FormlyFieldMultiCheckbox_ng_container_0_Template(rf, ctx) { if (rf & 1) {\n    const _r5 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵelementStart(1, \"mat-checkbox\", 1);\n    ɵngcc0.ɵɵlistener(\"change\", function FormlyFieldMultiCheckbox_ng_container_0_Template_mat_checkbox_change_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); const option_r2 = ctx.$implicit; const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.onChange(option_r2.value, $event.checked); });\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const option_r2 = ctx.$implicit;\n    const i_r3 = ctx.index;\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r1.id + \"_\" + i_r3)(\"formlyAttributes\", ctx_r1.field)(\"tabindex\", ctx_r1.to.tabindex || 0)(\"color\", ctx_r1.to.color)(\"labelPosition\", ctx_r1.to.labelPosition)(\"checked\", ctx_r1.isChecked(option_r2));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", option_r2.label, \" \");\n} }\nclass FormlyFieldMultiCheckbox extends FieldType {\n    constructor() {\n        super(...arguments);\n        this.defaultOptions = {\n            templateOptions: {\n                hideFieldUnderline: true,\n                floatLabel: 'always',\n                options: [],\n                color: 'accent',\n            },\n        };\n    }\n    /**\n     * @param {?} value\n     * @param {?} checked\n     * @return {?}\n     */\n    onChange(value, checked) {\n        if (this.to.type === 'array') {\n            this.formControl.patchValue(checked\n                ? [...(this.formControl.value || []), value]\n                : [...(this.formControl.value || [])].filter((/**\n                 * @param {?} o\n                 * @return {?}\n                 */\n                o => o !== value)));\n        }\n        else {\n            this.formControl.patchValue(Object.assign({}, this.formControl.value, { [value]: checked }));\n        }\n        this.formControl.markAsTouched();\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    onContainerClick(event) {\n        if (this.checkboxes.length) {\n            this.checkboxes.first.focus();\n        }\n        super.onContainerClick(event);\n    }\n    /**\n     * @param {?} option\n     * @return {?}\n     */\n    isChecked(option) {\n        /** @type {?} */\n        const value = this.formControl.value;\n        return value && (this.to.type === 'array'\n            ? (value.indexOf(option.value) !== -1)\n            : value[option.value]);\n    }\n}\nFormlyFieldMultiCheckbox.ɵfac = function FormlyFieldMultiCheckbox_Factory(t) { return ɵFormlyFieldMultiCheckbox_BaseFactory(t || FormlyFieldMultiCheckbox); };\nFormlyFieldMultiCheckbox.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FormlyFieldMultiCheckbox, selectors: [[\"formly-field-mat-multicheckbox\"]], viewQuery: function FormlyFieldMultiCheckbox_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(MatCheckbox, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.checkboxes = _t);\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 6, consts: [[4, \"ngFor\", \"ngForOf\"], [3, \"id\", \"formlyAttributes\", \"tabindex\", \"color\", \"labelPosition\", \"checked\", \"change\"]], template: function FormlyFieldMultiCheckbox_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, FormlyFieldMultiCheckbox_ng_container_0_Template, 3, 7, \"ng-container\", 0);\n        ɵngcc0.ɵɵpipe(1, \"async\");\n        ɵngcc0.ɵɵpipe(2, \"formlySelectOptions\");\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ɵngcc0.ɵɵpipeBind1(1, 1, ɵngcc0.ɵɵpipeBind2(2, 3, ctx.to.options, ctx.field)));\n    } }, directives: [ɵngcc1.NgForOf, ɵngcc2.MatCheckbox, ɵngcc3.FormlyAttributes], pipes: [ɵngcc1.AsyncPipe, ɵngcc4.ɵa], encapsulation: 2 });\nFormlyFieldMultiCheckbox.propDecorators = {\n    checkboxes: [{ type: ViewChildren, args: [MatCheckbox,] }]\n};\nconst ɵFormlyFieldMultiCheckbox_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(FormlyFieldMultiCheckbox);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlyFieldMultiCheckbox, [{\n        type: Component,\n        args: [{\n                selector: 'formly-field-mat-multicheckbox',\n                template: `\n    <ng-container *ngFor=\"let option of to.options | formlySelectOptions:field | async; let i = index;\">\n      <mat-checkbox\n        [id]=\"id + '_' + i\"\n        [formlyAttributes]=\"field\"\n        [tabindex]=\"to.tabindex || 0\"\n        [color]=\"to.color\"\n        [labelPosition]=\"to.labelPosition\"\n        [checked]=\"isChecked(option)\"\n        (change)=\"onChange(option.value, $event.checked)\">\n          {{ option.label }}\n      </mat-checkbox>\n    </ng-container>\n  `\n            }]\n    }], null, { checkboxes: [{\n            type: ViewChildren,\n            args: [MatCheckbox]\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FormlyMatMultiCheckboxModule {\n}\nFormlyMatMultiCheckboxModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: FormlyMatMultiCheckboxModule });\nFormlyMatMultiCheckboxModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function FormlyMatMultiCheckboxModule_Factory(t) { return new (t || FormlyMatMultiCheckboxModule)(); }, imports: [[\n            CommonModule,\n            ReactiveFormsModule,\n            MatCheckboxModule,\n            FormlyMatFormFieldModule,\n            FormlySelectModule,\n            FormlyModule.forChild({\n                types: [\n                    {\n                        name: 'multicheckbox',\n                        component: FormlyFieldMultiCheckbox,\n                        wrappers: ['form-field']\n                    },\n                ]\n            }),\n        ]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FormlyMatMultiCheckboxModule, { declarations: function () { return [FormlyFieldMultiCheckbox]; }, imports: function () { return [CommonModule,\n        ReactiveFormsModule,\n        MatCheckboxModule,\n        FormlyMatFormFieldModule,\n        FormlySelectModule, ɵngcc3.FormlyModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlyMatMultiCheckboxModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [FormlyFieldMultiCheckbox],\n                imports: [\n                    CommonModule,\n                    ReactiveFormsModule,\n                    MatCheckboxModule,\n                    FormlyMatFormFieldModule,\n                    FormlySelectModule,\n                    FormlyModule.forChild({\n                        types: [\n                            {\n                                name: 'multicheckbox',\n                                component: FormlyFieldMultiCheckbox,\n                                wrappers: ['form-field']\n                            },\n                        ]\n                    }),\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { FormlyMatMultiCheckboxModule, FormlyFieldMultiCheckbox };\n\n//# sourceMappingURL=ngx-formly-material-multicheckbox.js.map","import { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { FormlyModule } from '@ngx-formly/core';\nimport { FormlySelectModule } from '@ngx-formly/core/select';\nimport { Component, ViewChild, NgModule } from '@angular/core';\nimport { MatSelect, MatSelectModule } from '@angular/material/select';\nimport { FieldType, FormlyMatFormFieldModule } from '@ngx-formly/material/form-field';\nimport { MatPseudoCheckboxModule } from '@angular/material/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/material/select';\nimport * as ɵngcc2 from '@angular/forms';\nimport * as ɵngcc3 from '@ngx-formly/core';\nimport * as ɵngcc4 from '@angular/common';\nimport * as ɵngcc5 from '@angular/material/core';\nimport * as ɵngcc6 from '@ngx-formly/core/select';\n\nfunction FormlyFieldSelect_ng_template_0_Template(rf, ctx) { if (rf & 1) {\n    const _r7 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"mat-option\", 3);\n    ɵngcc0.ɵɵlistener(\"click\", function FormlyFieldSelect_ng_template_0_Template_mat_option_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r7); const selectOptions_r5 = ctx.selectOptions; const ctx_r6 = ɵngcc0.ɵɵnextContext(); return ctx_r6.toggleSelectAll(selectOptions_r5); });\n    ɵngcc0.ɵɵelement(1, \"mat-pseudo-checkbox\", 4);\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const selectOptions_r5 = ctx.selectOptions;\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"state\", ctx_r3.getSelectAllState(selectOptions_r5));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r3.to.selectAllOption, \" \");\n} }\nconst _c0 = function (a0) { return { selectOptions: a0 }; };\nfunction FormlyFieldSelect_ng_container_3_ng_container_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0, 7);\n} if (rf & 2) {\n    const selectOptions_r8 = ɵngcc0.ɵɵnextContext().ngIf;\n    ɵngcc0.ɵɵnextContext();\n    const _r2 = ɵngcc0.ɵɵreference(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", _r2)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction1(2, _c0, selectOptions_r8));\n} }\nfunction FormlyFieldSelect_ng_container_3_ng_container_2_mat_optgroup_1_mat_option_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mat-option\", 12);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const child_r16 = ctx.$implicit;\n    ɵngcc0.ɵɵproperty(\"value\", child_r16.value)(\"disabled\", child_r16.disabled);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", child_r16.label, \" \");\n} }\nfunction FormlyFieldSelect_ng_container_3_ng_container_2_mat_optgroup_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mat-optgroup\", 10);\n    ɵngcc0.ɵɵtemplate(1, FormlyFieldSelect_ng_container_3_ng_container_2_mat_optgroup_1_mat_option_1_Template, 2, 3, \"mat-option\", 11);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const item_r12 = ɵngcc0.ɵɵnextContext().$implicit;\n    ɵngcc0.ɵɵproperty(\"label\", item_r12.label);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", item_r12.group);\n} }\nfunction FormlyFieldSelect_ng_container_3_ng_container_2_mat_option_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"mat-option\", 12);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const item_r12 = ɵngcc0.ɵɵnextContext().$implicit;\n    ɵngcc0.ɵɵproperty(\"value\", item_r12.value)(\"disabled\", item_r12.disabled);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(item_r12.label);\n} }\nfunction FormlyFieldSelect_ng_container_3_ng_container_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, FormlyFieldSelect_ng_container_3_ng_container_2_mat_optgroup_1_Template, 2, 2, \"mat-optgroup\", 8);\n    ɵngcc0.ɵɵtemplate(2, FormlyFieldSelect_ng_container_3_ng_container_2_mat_option_2_Template, 2, 3, \"mat-option\", 9);\n    ɵngcc0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const item_r12 = ctx.$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", item_r12.group);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !item_r12.group);\n} }\nfunction FormlyFieldSelect_ng_container_3_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, FormlyFieldSelect_ng_container_3_ng_container_1_Template, 1, 4, \"ng-container\", 5);\n    ɵngcc0.ɵɵtemplate(2, FormlyFieldSelect_ng_container_3_ng_container_2_Template, 3, 2, \"ng-container\", 6);\n    ɵngcc0.ɵɵelementContainerEnd();\n} if (rf & 2) {\n    const selectOptions_r8 = ctx.ngIf;\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r4.to.multiple && ctx_r4.to.selectAllOption);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", selectOptions_r8);\n} }\nclass FormlyFieldSelect extends FieldType {\n    constructor() {\n        super(...arguments);\n        this.defaultOptions = {\n            templateOptions: { options: [] },\n        };\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n    getSelectAllState(options) {\n        if (this.empty || this.value.length === 0) {\n            return '';\n        }\n        return this.value.length !== this.getSelectAllValue(options).length\n            ? 'indeterminate'\n            : 'checked';\n    }\n    /**\n     * @param {?} options\n     * @return {?}\n     */\n    toggleSelectAll(options) {\n        /** @type {?} */\n        const selectAllValue = this.getSelectAllValue(options);\n        this.formControl.setValue(!this.value || this.value.length !== selectAllValue.length\n            ? selectAllValue\n            : []);\n    }\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n    change($event) {\n        if (this.to.change) {\n            this.to.change(this.field, $event);\n        }\n    }\n    /**\n     * @param {?} o1\n     * @param {?} o2\n     * @return {?}\n     */\n    compareWith(o1, o2) {\n        return o1 === o2;\n    }\n    /**\n     * @return {?}\n     */\n    _getAriaLabelledby() {\n        if (this.to.attributes && this.to.attributes['aria-labelledby']) {\n            return this.to.attributes['aria-labelledby'];\n        }\n        if (this.formField && this.formField._labelId) {\n            return this.formField._labelId;\n        }\n        return null;\n    }\n    /**\n     * @private\n     * @param {?} options\n     * @return {?}\n     */\n    getSelectAllValue(options) {\n        if (!this.selectAllValue || options !== this.selectAllValue.options) {\n            /** @type {?} */\n            const flatOptions = [];\n            options.forEach((/**\n             * @param {?} o\n             * @return {?}\n             */\n            o => o.group\n                ? flatOptions.push(...o.group)\n                : flatOptions.push(o)));\n            this.selectAllValue = {\n                options,\n                value: flatOptions.map((/**\n                 * @param {?} o\n                 * @return {?}\n                 */\n                o => o.value)),\n            };\n        }\n        return this.selectAllValue.value;\n    }\n}\nFormlyFieldSelect.ɵfac = function FormlyFieldSelect_Factory(t) { return ɵFormlyFieldSelect_BaseFactory(t || FormlyFieldSelect); };\nFormlyFieldSelect.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FormlyFieldSelect, selectors: [[\"formly-field-mat-select\"]], viewQuery: function FormlyFieldSelect_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵstaticViewQuery(MatSelect, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.formFieldControl = _t.first);\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 6, vars: 16, consts: [[\"selectAll\", \"\"], [3, \"id\", \"formControl\", \"formlyAttributes\", \"placeholder\", \"tabindex\", \"compareWith\", \"multiple\", \"errorStateMatcher\", \"aria-labelledby\", \"disableOptionCentering\", \"selectionChange\"], [4, \"ngIf\"], [3, \"click\"], [1, \"mat-option-pseudo-checkbox\", 3, \"state\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [3, \"label\", 4, \"ngIf\"], [3, \"value\", \"disabled\", 4, \"ngIf\"], [3, \"label\"], [3, \"value\", \"disabled\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\", \"disabled\"]], template: function FormlyFieldSelect_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, FormlyFieldSelect_ng_template_0_Template, 3, 2, \"ng-template\", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);\n        ɵngcc0.ɵɵelementStart(2, \"mat-select\", 1);\n        ɵngcc0.ɵɵlistener(\"selectionChange\", function FormlyFieldSelect_Template_mat_select_selectionChange_2_listener($event) { return ctx.change($event); });\n        ɵngcc0.ɵɵtemplate(3, FormlyFieldSelect_ng_container_3_Template, 3, 2, \"ng-container\", 2);\n        ɵngcc0.ɵɵpipe(4, \"async\");\n        ɵngcc0.ɵɵpipe(5, \"formlySelectOptions\");\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.id)(\"formControl\", ctx.formControl)(\"formlyAttributes\", ctx.field)(\"placeholder\", ctx.to.placeholder)(\"tabindex\", ctx.to.tabindex || 0)(\"compareWith\", ctx.to.compareWith || ctx.compareWith)(\"multiple\", ctx.to.multiple)(\"errorStateMatcher\", ctx.errorStateMatcher)(\"aria-labelledby\", ctx._getAriaLabelledby())(\"disableOptionCentering\", ctx.to.disableOptionCentering);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ɵngcc0.ɵɵpipeBind1(4, 11, ɵngcc0.ɵɵpipeBind2(5, 13, ctx.to.options, ctx.field)));\n    } }, directives: [ɵngcc1.MatSelect, ɵngcc2.NgControlStatus, ɵngcc2.FormControlDirective, ɵngcc3.FormlyAttributes, ɵngcc4.NgIf, ɵngcc5.MatOption, ɵngcc5.MatPseudoCheckbox, ɵngcc4.NgForOf, ɵngcc4.NgTemplateOutlet, ɵngcc5.MatOptgroup], pipes: [ɵngcc4.AsyncPipe, ɵngcc6.ɵa], encapsulation: 2 });\nFormlyFieldSelect.propDecorators = {\n    formFieldControl: [{ type: ViewChild, args: [MatSelect, (/** @type {?} */ ({ static: true })),] }]\n};\nconst ɵFormlyFieldSelect_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(FormlyFieldSelect);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlyFieldSelect, [{\n        type: Component,\n        args: [{\n                selector: 'formly-field-mat-select',\n                template: `\n    <ng-template #selectAll let-selectOptions=\"selectOptions\">\n      <mat-option (click)=\"toggleSelectAll(selectOptions)\">\n        <mat-pseudo-checkbox class=\"mat-option-pseudo-checkbox\"\n          [state]=\"getSelectAllState(selectOptions)\">\n        </mat-pseudo-checkbox>\n        {{ to.selectAllOption }}\n      </mat-option>\n    </ng-template>\n\n    <mat-select [id]=\"id\"\n      [formControl]=\"formControl\"\n      [formlyAttributes]=\"field\"\n      [placeholder]=\"to.placeholder\"\n      [tabindex]=\"to.tabindex || 0\"\n      [compareWith]=\"to.compareWith || compareWith\"\n      [multiple]=\"to.multiple\"\n      (selectionChange)=\"change($event)\"\n      [errorStateMatcher]=\"errorStateMatcher\"\n      [aria-labelledby]=\"_getAriaLabelledby()\"\n      [disableOptionCentering]=\"to.disableOptionCentering\"\n      >\n      <ng-container *ngIf=\"to.options | formlySelectOptions:field | async as selectOptions\">\n        <ng-container *ngIf=\"to.multiple && to.selectAllOption\" [ngTemplateOutlet]=\"selectAll\" [ngTemplateOutletContext]=\"{ selectOptions: selectOptions }\">\n        </ng-container>\n        <ng-container *ngFor=\"let item of selectOptions\">\n          <mat-optgroup *ngIf=\"item.group\" [label]=\"item.label\">\n            <mat-option *ngFor=\"let child of item.group\" [value]=\"child.value\" [disabled]=\"child.disabled\">\n              {{ child.label }}\n            </mat-option>\n          </mat-optgroup>\n          <mat-option *ngIf=\"!item.group\" [value]=\"item.value\" [disabled]=\"item.disabled\">{{ item.label }}</mat-option>\n        </ng-container>\n      </ng-container>\n    </mat-select>\n  `\n            }]\n    }], null, { formFieldControl: [{\n            type: ViewChild,\n            args: [MatSelect, ( /** @type {?} */({ static: true }))]\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FormlyMatSelectModule {\n}\nFormlyMatSelectModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: FormlyMatSelectModule });\nFormlyMatSelectModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function FormlyMatSelectModule_Factory(t) { return new (t || FormlyMatSelectModule)(); }, imports: [[\n            CommonModule,\n            ReactiveFormsModule,\n            MatSelectModule,\n            MatPseudoCheckboxModule,\n            FormlyMatFormFieldModule,\n            FormlySelectModule,\n            FormlyModule.forChild({\n                types: [{\n                        name: 'select',\n                        component: FormlyFieldSelect,\n                        wrappers: ['form-field']\n                    }]\n            }),\n        ]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FormlyMatSelectModule, { declarations: function () { return [FormlyFieldSelect]; }, imports: function () { return [CommonModule,\n        ReactiveFormsModule,\n        MatSelectModule,\n        MatPseudoCheckboxModule,\n        FormlyMatFormFieldModule,\n        FormlySelectModule, ɵngcc3.FormlyModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlyMatSelectModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [FormlyFieldSelect],\n                imports: [\n                    CommonModule,\n                    ReactiveFormsModule,\n                    MatSelectModule,\n                    MatPseudoCheckboxModule,\n                    FormlyMatFormFieldModule,\n                    FormlySelectModule,\n                    FormlyModule.forChild({\n                        types: [{\n                                name: 'select',\n                                component: FormlyFieldSelect,\n                                wrappers: ['form-field']\n                            }]\n                    }),\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { FormlyMatSelectModule, FormlyFieldSelect };\n\n//# sourceMappingURL=ngx-formly-material-select.js.map","import { NgModule } from '@angular/core';\nimport { FormlyMatFormFieldModule } from '@ngx-formly/material/form-field';\nimport * as ɵngcc0 from '@angular/core';\nexport { FieldType } from '@ngx-formly/material/form-field';\nimport { FormlyMatInputModule } from '@ngx-formly/material/input';\nimport { FormlyMatTextAreaModule } from '@ngx-formly/material/textarea';\nimport { FormlyMatRadioModule } from '@ngx-formly/material/radio';\nimport { FormlyMatCheckboxModule } from '@ngx-formly/material/checkbox';\nimport { FormlyMatMultiCheckboxModule } from '@ngx-formly/material/multicheckbox';\nimport { FormlyMatSelectModule } from '@ngx-formly/material/select';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass FormlyMaterialModule {\n}\nFormlyMaterialModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: FormlyMaterialModule });\nFormlyMaterialModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function FormlyMaterialModule_Factory(t) { return new (t || FormlyMaterialModule)(); }, imports: [[\n            FormlyMatFormFieldModule,\n            FormlyMatInputModule,\n            FormlyMatTextAreaModule,\n            FormlyMatRadioModule,\n            FormlyMatCheckboxModule,\n            FormlyMatMultiCheckboxModule,\n            FormlyMatSelectModule,\n        ]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FormlyMaterialModule, { imports: function () { return [FormlyMatFormFieldModule,\n        FormlyMatInputModule,\n        FormlyMatTextAreaModule,\n        FormlyMatRadioModule,\n        FormlyMatCheckboxModule,\n        FormlyMatMultiCheckboxModule,\n        FormlyMatSelectModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FormlyMaterialModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    FormlyMatFormFieldModule,\n                    FormlyMatInputModule,\n                    FormlyMatTextAreaModule,\n                    FormlyMatRadioModule,\n                    FormlyMatCheckboxModule,\n                    FormlyMatMultiCheckboxModule,\n                    FormlyMatSelectModule,\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { FormlyMaterialModule };\n\n//# sourceMappingURL=ngx-formly-material.js.map","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { catchError, finalize, map, retry } from 'rxjs/operators';\nimport { EntityService, IPagination } from '@ngx-starter-kit/shared';\nimport { environment } from '@env/environment';\nimport { AppNotification } from '@ngx-starter-kit/notifications';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotificationService extends EntityService<AppNotification> {\n  // Optionally overwrite baseUrl\n  public baseUrl = environment.API_BASE_URL;\n  readonly entityPath = 'notifications';\n\n  constructor(httpClient: HttpClient) {\n    super(httpClient);\n  }\n\n  getAll(): Observable<AppNotification[]> {\n    const params = new HttpParams().set('order', 'ASC').set('read', 'false');\n    this.loadingSubject.next(true);\n    return this.httpClient.get<IPagination<AppNotification>>(`${this.baseUrl}/${this.entityPath}`, { params }).pipe(\n      retry(3), // retry a failed request up to 3 times\n      catchError(this.handleError),\n      finalize(() => this.loadingSubject.next(false)),\n      // return without count\n      map(data => data.items),\n    );\n  }\n\n  delete(id: number | string) {\n    this.loadingSubject.next(true);\n    return this.httpClient.delete(`${this.baseUrl}/${this.entityPath}/${id}`).pipe(\n      catchError(this.handleError),\n      finalize(() => this.loadingSubject.next(false)),\n    );\n  }\n\n  send(id: number | string) {\n    this.loadingSubject.next(true);\n    return this.httpClient.post(`${this.baseUrl}/${this.entityPath}/send`, { id }).pipe(\n      catchError(this.handleError),\n      finalize(() => this.loadingSubject.next(false)),\n    );\n  }\n}\n","<mat-card [@fadeAnimation]=\"animationTrigger$ | async\">\n  <mat-card-header>\n    <mat-card-title><h3>Selected Notification</h3></mat-card-title>\n  </mat-card-header>\n  <mat-divider></mat-divider>\n  <mat-card-content>\n    <mat-list role=\"list\">\n      <mat-list-item *ngFor=\"let entry of (notification | keyvalue)\" role=\"listitem\">\n        <div>\n          <span>{{ entry.key }}：</span><span>{{ entry.value | json }}</span>\n        </div>\n      </mat-list-item>\n    </mat-list>\n  </mat-card-content>\n</mat-card>\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { BehaviorSubject, Subscription as RxSubscription } from 'rxjs';\nimport { fadeAnimation } from '@ngx-starter-kit/animations';\n\nimport { NotificationService } from '../../services/notification.service';\nimport { AppNotification } from '@ngx-starter-kit/notifications';\n\n@Component({\n  selector: 'ngx-notification-detail',\n  templateUrl: './notification-detail.component.html',\n  styleUrls: ['./notification-detail.component.scss'],\n  animations: [fadeAnimation],\n})\nexport class NotificationDetailComponent implements OnInit, OnDestroy {\n  notification: AppNotification;\n  sub: RxSubscription;\n  animationTrigger$ = new BehaviorSubject<string>('');\n\n  constructor(private notificationService: NotificationService, private route: ActivatedRoute) {}\n\n  ngOnInit() {\n    this.sub = this.route.params.subscribe(params => {\n      this.notificationService.getById(params.id).subscribe(data => {\n        this.animationTrigger$.next(params.id);\n        this.notification = data;\n      });\n    });\n  }\n\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { catchError, finalize, map, retry } from 'rxjs/operators';\nimport { EntityService, IPagination } from '@ngx-starter-kit/shared';\nimport { environment } from '@env/environment';\nimport { Subscription } from '../models/subscription.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SubscriptionService extends EntityService<Subscription> {\n  // Optionally overwrite baseUrl\n  public baseUrl = environment.API_BASE_URL;\n  readonly entityPath = 'subscription';\n\n  constructor(httpClient: HttpClient) {\n    super(httpClient);\n  }\n\n  getAll(): Observable<Subscription[]> {\n    this.loadingSubject.next(true);\n    return this.httpClient.get<IPagination<Subscription>>(`${this.baseUrl}/${this.entityPath}`).pipe(\n      retry(3), // retry a failed request up to 3 times\n      catchError(this.handleError),\n      finalize(() => this.loadingSubject.next(false)),\n      // return without count\n      map(data => data.items),\n    );\n  }\n}\n","<mat-card [@fadeAnimation]=\"animationTrigger$ | async\">\n  <mat-card-header>\n    <mat-card-title><h3>Selected Subscription</h3></mat-card-title>\n  </mat-card-header>\n  <mat-divider></mat-divider>\n  <mat-card-content>\n    <mat-list role=\"list\">\n      <mat-list-item *ngFor=\"let entry of (subscription | keyvalue)\" role=\"listitem\">\n        <div>\n          <span>{{ entry.key }}：</span><span>{{ entry.value | json }}</span>\n        </div>\n      </mat-list-item>\n    </mat-list>\n  </mat-card-content>\n</mat-card>\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { BehaviorSubject, Subscription as RxSubscription } from 'rxjs';\nimport { fadeAnimation } from '@ngx-starter-kit/animations';\n\nimport { SubscriptionService } from '../../services/subscription.service';\nimport { Subscription } from '../../models/subscription.model';\n\n@Component({\n  selector: 'ngx-subscription-detail',\n  templateUrl: './subscription-detail.component.html',\n  styleUrls: ['./subscription-detail.component.scss'],\n  animations: [fadeAnimation],\n})\nexport class SubscriptionDetailComponent implements OnInit, OnDestroy {\n  subscription: Subscription;\n  sub: RxSubscription;\n  animationTrigger$ = new BehaviorSubject<string>('');\n\n  constructor(private subscriptionService: SubscriptionService, private route: ActivatedRoute) {}\n\n  ngOnInit() {\n    this.sub = this.route.params.subscribe(params => {\n      this.subscriptionService.getById(params.id).subscribe(data => {\n        this.animationTrigger$.next(params.id);\n        this.subscription = data;\n      });\n    });\n  }\n\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n  }\n}\n","import { AfterViewInit, Component, ComponentRef, Inject, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { hierarchicalRouteAnimation } from '@ngx-starter-kit/animations';\nimport { RouterState } from '@ngxs/router-plugin';\nimport { map } from 'rxjs/operators';\nimport { Store } from '@ngxs/store';\nimport { RouterStateData, WINDOW } from '@ngx-starter-kit/core';\nimport { NotificationsComponent } from '../notifications/notifications.component';\n\n/** @dynamic */\n@Component({\n  selector: 'ngx-admin-layout',\n  templateUrl: './admin-layout.component.html',\n  styleUrls: ['./admin-layout.component.scss'],\n  animations: [hierarchicalRouteAnimation],\n})\nexport class AdminLayoutComponent implements OnInit {\n  quickpanelOpen = false;\n  crumbs$;\n  depth$;\n\n  constructor(private store: Store, @Inject(WINDOW) private window: Window) {}\n\n  ngOnInit() {\n    this.crumbs$ = this.store\n      .select<any>(RouterState.state)\n      .pipe(map(state => Array.from(state.breadcrumbs, ([key, value]) => ({ name: key, link: '/' + value }))));\n\n    this.depth$ = this.store.select<RouterStateData>(RouterState.state).pipe(map(state => state.data.depth));\n  }\n\n  onActivate(componentRef: ComponentRef<any>) {\n    // HINT: I can set inputs on activated component!\n    // if (componentRef instanceof NotificationsComponent) {\n    //   componentRef.sayhello();\n    //   componentRef.crumbs$ = this.crumbs$;\n    // }\n  }\n}\n","<mat-sidenav-container class=\"dashboard-container\">\n  <mat-sidenav class=\"quickpanel\" [opened]=\"quickpanelOpen\" position=\"end\" align=\"end\" mode=\"over\" #quickpanel>\n    <ngx-quickpanel></ngx-quickpanel>\n  </mat-sidenav>\n\n  <mat-sidenav-content class=\"content-container\" fxLayout=\"column\">\n    <ngx-toolbar [quickpanel]=\"quickpanel\"></ngx-toolbar>\n    <!--<ngx-topnav></ngx-topnav>-->\n    <div class=\"wrapper\">\n      <ngx-breadcrumbs title=\"Admin\" [crumbs]=\"crumbs$ | async\"></ngx-breadcrumbs>\n      <perfect-scrollbar [usePSClass]=\"false\" style=\"overflow: visible\">\n        <div [@routeAnimation]=\"depth$ | async\"><router-outlet (activate)=\"onActivate($event)\"></router-outlet></div>\n      </perfect-scrollbar>\n    </div>\n  </mat-sidenav-content>\n</mat-sidenav-container>\n","import { Component, Inject } from '@angular/core';\nimport { EntityFormComponent } from '@ngx-starter-kit/shared';\nimport { AppNotification, NotificationColor, NotificationIcon, TargetType } from '@ngx-starter-kit/notifications';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { FormlyFieldConfig, FormlyFormOptions } from '@ngx-formly/core';\n\nfunction enumToOptions(enumType): { label: string; value: any }[] {\n  return Object.keys(enumType).map(key => ({ label: key, value: enumType[key] }));\n}\n\n@Component({\n  selector: 'ngx-notification-edit',\n  templateUrl: './notification-edit.component.html',\n  styleUrls: ['./notification-edit.component.scss'],\n})\nexport class NotificationEditComponent extends EntityFormComponent<AppNotification> {\n  model;\n  fields: FormlyFieldConfig[];\n  options: FormlyFormOptions = {};\n  constructor(\n    @Inject(MAT_DIALOG_DATA) public data: { title: string; payload: AppNotification },\n    public dialogRef: MatDialogRef<NotificationEditComponent>,\n    private fb: FormBuilder,\n  ) {\n    super(data, dialogRef);\n  }\n\n  /* Optional */\n  // tslint:disable-next-line\n  ngOnInit() {\n    super.ngOnInit();\n  }\n\n  buildForm(item: AppNotification) {\n    this.entityForm = new FormGroup({});\n    this.model = item;\n    this.fields = [\n      {\n        key: 'title',\n        type: 'input',\n        templateOptions: {\n          type: 'email',\n          label: 'Title',\n          placeholder: 'title',\n          required: true,\n        },\n      },\n      {\n        key: 'body',\n        type: 'input',\n        templateOptions: {\n          label: 'Body',\n          required: true,\n        },\n      },\n      {\n        key: 'target',\n        type: 'input',\n        templateOptions: {\n          label: 'Target',\n          required: true,\n        },\n      },\n      {\n        key: 'targetType',\n        type: 'select',\n        templateOptions: {\n          label: 'TargetType',\n          options: enumToOptions(TargetType),\n          required: true,\n        },\n      },\n      {\n        key: 'icon',\n        type: 'select',\n        templateOptions: {\n          label: 'Icon',\n          options: enumToOptions(NotificationIcon),\n          required: true,\n        },\n      },\n      {\n        key: 'color',\n        type: 'select',\n        templateOptions: {\n          label: 'Color',\n          options: enumToOptions(NotificationColor),\n          required: true,\n        },\n      },\n      {\n        key: 'native',\n        type: 'checkbox',\n        templateOptions: {\n          label: 'Native',\n          required: true,\n        },\n      },\n    ];\n  }\n}\n","<h1 mat-dialog-title cdkDrag cdkDragHandle cdkDragRootElement=\".cdk-overlay-pane\" style=\"cursor: move\">{{ title }}</h1>\n\n<form [formGroup]=\"entityForm\" (ngSubmit)=\"submit()\">\n  <mat-dialog-content>\n    <formly-form [model]=\"model\" [fields]=\"fields\" [options]=\"options\" [form]=\"entityForm\"> </formly-form>\n  </mat-dialog-content>\n  <mat-dialog-actions fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n    <button mat-button color=\"warn\" type=\"button\" (click)=\"options.resetModel()\" [mat-dialog-close]=\"false\">\n      Cancel\n    </button>\n    <button mat-raised-button color=\"primary\" [disabled]=\"entityForm.invalid\">Save</button>\n  </mat-dialog-actions>\n</form>\n","<div fxLayout=\"column\">\n  <mat-card class=\"mat-elevation-z8\">\n    <mat-toolbar *ngIf=\"showToolbar\">\n      <mat-form-field fxFlex>\n        <input matInput #filter (keyup)=\"applyFilter($event.target.value)\" />\n        <mat-label> <mat-icon>search</mat-icon>Filter </mat-label>\n        <button\n          mat-button\n          *ngIf=\"filter.value !== ''\"\n          matSuffix\n          mat-icon-button\n          aria-label=\"Clear\"\n          (click)=\"filter.value = ''\"\n        >\n          <mat-icon>close</mat-icon>\n        </button>\n      </mat-form-field>\n\n      <button\n        *ngIf=\"showColumnFilter\"\n        mat-icon-button\n        style=\"margin-left: 16px\"\n        type=\"button\"\n        [matMenuTriggerFor]=\"columnFilter\"\n      >\n        <mat-icon>filter_list</mat-icon>\n      </button>\n\n      <mat-menu #columnFilter=\"matMenu\" yPosition=\"below\" xPosition=\"before\">\n        <button\n          class=\"checkbox-item mat-menu-item\"\n          *ngFor=\"let column of columns\"\n          (click)=\"toggleColumnVisibility(column, $event)\"\n        >\n          <!--\n            <mat-checkbox [(ngModel)]=\"column.visible\" class=\"checkbox\" #checkbox (click)=\"$event.stopPropagation()\">\n          -->\n          <mat-checkbox\n            [checked]=\"column.visible\"\n            (change)=\"column.visible = !column.visible\"\n            class=\"checkbox\"\n            #checkbox\n            (click)=\"$event.stopPropagation()\"\n          >\n            {{ column.header }}\n          </mat-checkbox>\n        </button>\n      </mat-menu>\n\n      <button\n        *ngIf=\"showActionColumn\"\n        mat-mini-fab\n        color=\"primary\"\n        style=\"margin-left: 16px\"\n        (click)=\"openPopUp()\"\n        matTooltip=\"add\"\n      >\n        <mat-icon>add</mat-icon>\n      </button>\n    </mat-toolbar>\n\n    <mat-progress-bar *ngIf=\"(loading$ | async)\" mode=\"indeterminate\"></mat-progress-bar>\n\n    <mat-table #table [dataSource]=\"dataSource\" matSort>\n      <!-- Checkbox Column -->\n      <ng-container *ngIf=\"maxSelectable > 0\" matColumnDef=\"select\">\n        <mat-header-cell *matHeaderCellDef>\n          <mat-checkbox\n            (change)=\"$event ? masterToggle() : null\"\n            [disabled]=\"!dataSource.filteredData.length\"\n            [checked]=\"isMasterToggleChecked()\"\n            [indeterminate]=\"isMasterToggleIndeterminate()\"\n          >\n          </mat-checkbox>\n        </mat-header-cell>\n        <mat-cell *matCellDef=\"let row\">\n          <mat-checkbox\n            (click)=\"$event.stopPropagation()\"\n            (change)=\"$event ? selectRow(row) : null\"\n            [checked]=\"selection.isSelected(row)\"\n          >\n          </mat-checkbox>\n        </mat-cell>\n      </ng-container>\n\n      <ng-container\n        *ngFor=\"let column of columns\"\n        [matColumnDef]=\"column.property\"\n        [sticky]=\"column.sticky === 'start'\"\n        [stickyEnd]=\"column.sticky === 'end'\"\n      >\n        <mat-header-cell *matHeaderCellDef mat-sort-header> {{ column.header }} </mat-header-cell>\n        <mat-cell *matCellDef=\"let row\">\n          <ng-container *ngIf=\"column.template; else noTemplate\">\n            <ng-container\n              *ngTemplateOutlet=\"column.template; context: { $implicit: row, column: row[column.property] }\"\n            ></ng-container>\n          </ng-container>\n          <ng-template #noTemplate> {{ column.displayFn(row) }} </ng-template>\n        </mat-cell>\n      </ng-container>\n\n      <ng-container *ngIf=\"showActionColumn\" [matColumnDef]=\"actionColumn\" sticky>\n        <mat-header-cell *matHeaderCellDef>{{ actionColumn }}</mat-header-cell>\n        <mat-cell *matCellDef=\"let entity\">\n          <button type=\"button\" (click)=\"openPopUp(entity)\" color=\"primary\" mat-icon-button>\n            <mat-icon>edit_mode</mat-icon>\n          </button>\n\n          <button type=\"button\" (click)=\"delete(entity).subscribe()\" color=\"warn\" mat-icon-button>\n            <mat-icon>delete</mat-icon>\n          </button>\n        </mat-cell>\n      </ng-container>\n\n      <mat-header-row *matHeaderRowDef=\"displayedColumns; sticky: true\"></mat-header-row>\n      <mat-row\n        *matRowDef=\"let row; columns: displayedColumns\"\n        class=\"row\"\n        [class.selected]=\"selection.isSelected(row)\"\n      ></mat-row>\n      <!-- <mat-row *matRowDef=\"let row; columns: displayedColumns;\" class=\"row\" -->\n      <!-- [class.selected]=\"selection.isSelected(row)\" (click)=\"selectRow(row)\"></mat-row> -->\n    </mat-table>\n\n    <mat-paginator\n      #paginator\n      [pageSize]=\"5\"\n      [pageSizeOptions]=\"[5, 10, 20]\"\n      [showFirstLastButtons]=\"true\"\n    ></mat-paginator>\n  </mat-card>\n</div>\n\n<br /><br />\n<!-- <div [@routerTransition]=\"getRouteAnimation(o)\"> -->\n<router-outlet #o=\"outlet\"></router-outlet>\n<!-- </div> -->\n<ng-template #send let-row>\n  <button mat-icon-button (click)=\"onSend(row).subscribe()\"><mat-icon>mail_outline</mat-icon></button>\n</ng-template>\n\n<ng-template #editDelete let-row>\n  <button type=\"button\" (click)=\"openPopUp(row)\" color=\"primary\" mat-icon-button><mat-icon>edit_mode</mat-icon></button>\n  <button type=\"button\" (click)=\"delete(row).subscribe()\" color=\"warn\" mat-icon-button>\n    <mat-icon>delete</mat-icon>\n  </button>\n</ng-template>\n\n<ng-template #demo let-row let-column=\"column\">\n  <div>{{ row.id }} -- {{ column }}</div>\n</ng-template>\n","import { Component, TemplateRef, ViewChild } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { AppConfirmService } from '@ngx-starter-kit/app-confirm';\nimport { AppNotification, NotificationColor, NotificationIcon, TargetType } from '@ngx-starter-kit/notifications';\nimport { EntitiesComponent, EntityColumnDef } from '@ngx-starter-kit/shared';\nimport { Navigate } from '@ngxs/router-plugin';\nimport { Store } from '@ngxs/store';\nimport { formatDistance } from 'date-fns';\nimport { throwError } from 'rxjs';\nimport { catchError, concatMap, filter, mergeMap, tap } from 'rxjs/operators';\nimport { NotificationEditComponent } from '../../components/notification-edit/notification-edit.component';\nimport { NotificationService } from '../../services/notification.service';\n\n// const entityHtmlTpl = require('../../../../../shared/src/lib/containers/entity/entity.component.html');\n// const cellHtmlTpl = require('./cell.templates.html');\n\n// tslint:disable-next-line\n@Component({\n  selector: 'ngx-admin-notifications',\n  // FIXME: AOT build not working with require\n  // template: entityHtmlTpl + cellHtmlTpl,\n  templateUrl: './notifications.component.html',\n  styleUrls: [\n    './notifications.component.scss',\n    '../../../../../shared/src/lib/containers/entity/entity.component.scss',\n  ],\n})\nexport class NotificationsComponent extends EntitiesComponent<AppNotification, NotificationService> {\n  @ViewChild('send', { static: true }) sendTpl: TemplateRef<any>;\n  // @ViewChild('editDelete', {static: true}) editDeleteTpl: TemplateRef<any>;\n  columns: EntityColumnDef<AppNotification>[];\n\n  // optional\n  readonly showActionColumn = true;\n  readonly showColumnFilter = true;\n  readonly showToolbar = true;\n  readonly formRef = NotificationEditComponent;\n\n  constructor(\n    private notificationService: NotificationService,\n    private store: Store,\n    private dialog: MatDialog,\n    private snack: MatSnackBar,\n    private confirmService: AppConfirmService\n  ) {\n    super(notificationService);\n  }\n\n  // tslint:disable-next-line\n  ngOnInit() {\n    super.ngOnInit();\n    this.columns = [\n      new EntityColumnDef<AppNotification>({ property: 'id', header: 'No.', sticky: 'start' }),\n      new EntityColumnDef<AppNotification>({ property: 'title', header: 'Title' }),\n      new EntityColumnDef<AppNotification>({ property: 'body', header: 'Body' }),\n      new EntityColumnDef<AppNotification>({ property: 'target', header: 'Target' }),\n      new EntityColumnDef<AppNotification>({ property: 'targetType', header: 'Type' }),\n      new EntityColumnDef<AppNotification>({ property: 'icon', header: 'Icon' }),\n      new EntityColumnDef<AppNotification>({ property: 'color', header: 'Color' }),\n      new EntityColumnDef<AppNotification>({ property: 'read', header: 'Read' }),\n      new EntityColumnDef<AppNotification>({ property: 'native', header: 'Native' }),\n      new EntityColumnDef<AppNotification>({ property: 'isActive', header: 'Active' }),\n      new EntityColumnDef<AppNotification>({\n        property: 'createdAt',\n        header: 'Created',\n        displayFn: (entity) =>\n          `${formatDistance(this.stringToDate(entity.createdAt), new Date(), { addSuffix: true })}`,\n      }),\n      new EntityColumnDef<AppNotification>({\n        property: 'updatedAt',\n        header: 'Updated',\n        displayFn: (entity) =>\n          `${formatDistance(this.stringToDate(entity.updatedAt), new Date(), { addSuffix: true })}`,\n      }),\n      new EntityColumnDef<AppNotification>({ property: 'send', header: 'Send', template: this.sendTpl }),\n      // new EntityColumnDef<AppNotification>({ property: 'actions', header: 'Actions', template: this.editDeleteTpl }),\n    ] as EntityColumnDef<AppNotification>[];\n  }\n\n  // optional\n  delete(item: AppNotification) {\n    return this.confirmService.confirm('Confirm', `Delete Notification(${item.id})?`).pipe(\n      filter((confirmed) => confirmed === true),\n      mergeMap((_) => super.delete(item)),\n      tap((_) => {\n        this.snack.open('Notification Deleted!', 'OK', { duration: 5000 });\n        this.store.dispatch(new Navigate([`/admin/notifications`]));\n      }),\n      catchError((error) => {\n        this.snack.open(error, 'OK', { duration: 10000 });\n        return throwError('Ignore Me!');\n      })\n    );\n  }\n\n  onSend(row: AppNotification) {\n    return this.notificationService.send(row.id).pipe(\n      tap((_) => {\n        this.snack.open('Notification Sent!', 'OK', { duration: 5000 });\n      }),\n      catchError((error) => {\n        this.snack.open(error, 'OK', { duration: 10000 });\n        return throwError('Ignore Me!');\n      })\n    );\n  }\n\n  // required to override\n  getNewEntity(): AppNotification {\n    const entity = new AppNotification();\n    entity.native = true;\n    entity.target = 'all';\n    entity.targetType = TargetType.ALL;\n    entity.color = NotificationColor.WARN;\n    entity.icon = NotificationIcon.NOTIFICATIONS;\n    return entity;\n  }\n\n  // optional\n  showDetails(entity: AppNotification) {\n    if (entity) {\n      this.store.dispatch(new Navigate([`/admin/notifications/${entity.id}`]));\n    } else {\n      this.store.dispatch(new Navigate(['/admin/notifications']));\n    }\n  }\n\n  // filterPredicate(entity: AppNotification, _filter: string): boolean  {\n  //   return entity.first_name.indexOf(_filter) !== -1;\n  // }\n\n  // optional\n  openPopUp(entity?: AppNotification) {\n    let isNew = false;\n    let id;\n    if (!entity) {\n      isNew = true;\n      entity = this.getNewEntity();\n    } else {\n      id = entity.id;\n    }\n    const title = isNew ? 'Add Notification' : 'Update Notification';\n\n    const dialogRef = this.dialog.open(this.formRef, {\n      width: '720px',\n      disableClose: true,\n      data: { title, payload: entity },\n    });\n\n    dialogRef\n      .afterClosed()\n      .pipe(\n        filter((res) => res !== false),\n        // tap(res => console.log(res)),\n        concatMap((res: AppNotification) => super.updateOrCreate(res, id))\n      )\n      .subscribe(\n        (_) => {\n          this.snack.open(isNew ? 'Notification Created!' : 'Notification Updated!', 'OK', { duration: 5000 });\n          this.store.dispatch(new Navigate(['/admin/notifications']));\n        },\n        (error) => this.snack.open(error, 'OK', { duration: 10000 })\n      );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'ngx-overview',\n  templateUrl: './overview.component.html',\n  styleUrls: ['./overview.component.scss'],\n})\nexport class OverviewComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit() {}\n}\n","<div fxLayout=\"row wrap\" fxLayout.lt-sm=\"column\" fxLayoutGap=\"32px grid\">\n  <div fxFlex=\"0 1 calc(33.3% - 32px)\" fxFlex.lt-md=\"0 1 calc(50% - 32px)\" fxFlex.lt-sm=\"100%\">\n    <mat-card><a routerLink=\"/admin\">Overview</a></mat-card>\n  </div>\n  <div fxFlex=\"0 1 calc(33.3% - 32px)\" fxFlex.lt-md=\"0 1 calc(50% - 32px)\" fxFlex.lt-sm=\"100%\">\n    <mat-card><a routerLink=\"/admin/subscriptions\">Subscriptions</a></mat-card>\n  </div>\n  <div fxFlex=\"0 1 calc(33.3% - 32px)\" fxFlex.lt-md=\"0 1 calc(50% - 32px)\" fxFlex.lt-sm=\"100%\">\n    <mat-card><a routerLink=\"/admin/notifications\">Notifications</a></mat-card>\n  </div>\n  <div fxFlex=\"0 1 calc(33.3% - 32px)\" fxFlex.lt-md=\"0 1 calc(50% - 32px)\" fxFlex.lt-sm=\"100%\">\n    <mat-card><a routerLink=\"/dashboard\">Dashboard</a></mat-card>\n  </div>\n</div>\n","<div fxLayout=\"column\">\n  <mat-card class=\"mat-elevation-z8\">\n    <mat-toolbar *ngIf=\"showToolbar\">\n      <mat-form-field fxFlex>\n        <input matInput #filter (keyup)=\"applyFilter($event.target.value)\" />\n        <mat-label> <mat-icon>search</mat-icon>Filter </mat-label>\n        <button\n          mat-button\n          *ngIf=\"filter.value !== ''\"\n          matSuffix\n          mat-icon-button\n          aria-label=\"Clear\"\n          (click)=\"filter.value = ''\"\n        >\n          <mat-icon>close</mat-icon>\n        </button>\n      </mat-form-field>\n\n      <button\n        *ngIf=\"showColumnFilter\"\n        mat-icon-button\n        style=\"margin-left: 16px\"\n        type=\"button\"\n        [matMenuTriggerFor]=\"columnFilter\"\n      >\n        <mat-icon>filter_list</mat-icon>\n      </button>\n\n      <mat-menu #columnFilter=\"matMenu\" yPosition=\"below\" xPosition=\"before\">\n        <button\n          class=\"checkbox-item mat-menu-item\"\n          *ngFor=\"let column of columns\"\n          (click)=\"toggleColumnVisibility(column, $event)\"\n        >\n          <!--\n            <mat-checkbox [(ngModel)]=\"column.visible\" class=\"checkbox\" #checkbox (click)=\"$event.stopPropagation()\">\n          -->\n          <mat-checkbox\n            [checked]=\"column.visible\"\n            (change)=\"column.visible = !column.visible\"\n            class=\"checkbox\"\n            #checkbox\n            (click)=\"$event.stopPropagation()\"\n          >\n            {{ column.header }}\n          </mat-checkbox>\n        </button>\n      </mat-menu>\n\n      <button\n        *ngIf=\"showActionColumn\"\n        mat-mini-fab\n        color=\"primary\"\n        style=\"margin-left: 16px\"\n        (click)=\"openPopUp()\"\n        matTooltip=\"add\"\n      >\n        <mat-icon>add</mat-icon>\n      </button>\n    </mat-toolbar>\n\n    <mat-progress-bar *ngIf=\"(loading$ | async)\" mode=\"indeterminate\"></mat-progress-bar>\n\n    <mat-table #table [dataSource]=\"dataSource\" matSort>\n      <!-- Checkbox Column -->\n      <ng-container *ngIf=\"maxSelectable > 0\" matColumnDef=\"select\">\n        <mat-header-cell *matHeaderCellDef>\n          <mat-checkbox\n            (change)=\"$event ? masterToggle() : null\"\n            [disabled]=\"!dataSource.filteredData.length\"\n            [checked]=\"isMasterToggleChecked()\"\n            [indeterminate]=\"isMasterToggleIndeterminate()\"\n          >\n          </mat-checkbox>\n        </mat-header-cell>\n        <mat-cell *matCellDef=\"let row\">\n          <mat-checkbox\n            (click)=\"$event.stopPropagation()\"\n            (change)=\"$event ? selectRow(row) : null\"\n            [checked]=\"selection.isSelected(row)\"\n          >\n          </mat-checkbox>\n        </mat-cell>\n      </ng-container>\n\n      <ng-container\n        *ngFor=\"let column of columns\"\n        [matColumnDef]=\"column.property\"\n        [sticky]=\"column.sticky === 'start'\"\n        [stickyEnd]=\"column.sticky === 'end'\"\n      >\n        <mat-header-cell *matHeaderCellDef mat-sort-header> {{ column.header }} </mat-header-cell>\n        <mat-cell *matCellDef=\"let row\">\n          <ng-container *ngIf=\"column.template; else noTemplate\">\n            <ng-container\n              *ngTemplateOutlet=\"column.template; context: { $implicit: row, column: row[column.property] }\"\n            ></ng-container>\n          </ng-container>\n          <ng-template #noTemplate> {{ column.displayFn(row) }} </ng-template>\n        </mat-cell>\n      </ng-container>\n\n      <ng-container *ngIf=\"showActionColumn\" [matColumnDef]=\"actionColumn\" sticky>\n        <mat-header-cell *matHeaderCellDef>{{ actionColumn }}</mat-header-cell>\n        <mat-cell *matCellDef=\"let entity\">\n          <button type=\"button\" (click)=\"openPopUp(entity)\" color=\"primary\" mat-icon-button>\n            <mat-icon>edit_mode</mat-icon>\n          </button>\n\n          <button type=\"button\" (click)=\"delete(entity).subscribe()\" color=\"warn\" mat-icon-button>\n            <mat-icon>delete</mat-icon>\n          </button>\n        </mat-cell>\n      </ng-container>\n\n      <mat-header-row *matHeaderRowDef=\"displayedColumns; sticky: true\"></mat-header-row>\n      <mat-row\n        *matRowDef=\"let row; columns: displayedColumns\"\n        class=\"row\"\n        [class.selected]=\"selection.isSelected(row)\"\n      ></mat-row>\n      <!-- <mat-row *matRowDef=\"let row; columns: displayedColumns;\" class=\"row\" -->\n      <!-- [class.selected]=\"selection.isSelected(row)\" (click)=\"selectRow(row)\"></mat-row> -->\n    </mat-table>\n\n    <mat-paginator\n      #paginator\n      [pageSize]=\"5\"\n      [pageSizeOptions]=\"[5, 10, 20]\"\n      [showFirstLastButtons]=\"true\"\n    ></mat-paginator>\n  </mat-card>\n</div>\n\n<br /><br />\n<!-- <div [@routerTransition]=\"getRouteAnimation(o)\"> -->\n<router-outlet #o=\"outlet\"></router-outlet>\n<!-- </div> -->\n<ng-template #deleteButton let-row>\n  <button type=\"button\" (click)=\"delete(row).subscribe()\" color=\"warn\" mat-icon-button>\n    <mat-icon>delete</mat-icon>\n  </button>\n</ng-template>\n","import { Component, TemplateRef, ViewChild } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { AppConfirmService } from '@ngx-starter-kit/app-confirm';\nimport { EntitiesComponent, EntityColumnDef } from '@ngx-starter-kit/shared';\nimport { Navigate } from '@ngxs/router-plugin';\nimport { Store } from '@ngxs/store';\nimport { formatDistance } from 'date-fns';\nimport { throwError } from 'rxjs';\nimport { catchError, filter, mergeMap, tap } from 'rxjs/operators';\nimport { Subscription } from '../../models/subscription.model';\nimport { SubscriptionService } from '../../services/subscription.service';\n\n// const entityHtmlTpl = require('../../../../../shared/src/lib/containers/entity/entity.component.html');\n// const cellHtmlTpl = require('./cell.templates.html');\n\n// tslint:disable-next-line\n@Component({\n  selector: 'ngx-admin-subscriptions',\n  // FIXME: AOT build not working with require\n  // template: entityHtmlTpl + cellHtmlTpl,\n  templateUrl: './subscriptions.component.html',\n  styleUrls: [\n    './subscriptions.component.scss',\n    '../../../../../shared/src/lib/containers/entity/entity.component.scss',\n  ],\n})\nexport class SubscriptionsComponent extends EntitiesComponent<Subscription, SubscriptionService> {\n  @ViewChild('deleteButton', { static: true }) deleteTpl: TemplateRef<any>;\n  columns: EntityColumnDef<Subscription>[];\n\n  // optional\n  readonly showColumnFilter = true;\n  readonly showToolbar = true;\n\n  constructor(\n    subscriptionService: SubscriptionService,\n    private store: Store,\n    private dialog: MatDialog,\n    private snack: MatSnackBar,\n    private confirmService: AppConfirmService\n  ) {\n    super(subscriptionService);\n  }\n\n  // tslint:disable-next-line\n  ngOnInit() {\n    super.ngOnInit();\n    this.columns = [\n      new EntityColumnDef<Subscription>({ property: 'id', header: 'No.' }),\n      new EntityColumnDef<Subscription>({ property: 'username', header: 'User' }),\n      new EntityColumnDef<Subscription>({ property: 'topics', header: 'Topics' }),\n      new EntityColumnDef<Subscription>({\n        property: 'createdAt',\n        header: 'Created',\n        displayFn: (entity) =>\n          `${formatDistance(this.stringToDate(entity.createdAt), new Date(), { addSuffix: true })}`,\n      }),\n      new EntityColumnDef<Subscription>({\n        property: 'updatedAt',\n        header: 'Updated',\n        displayFn: (entity) =>\n          `${formatDistance(this.stringToDate(entity.updatedAt), new Date(), { addSuffix: true })}`,\n      }),\n      new EntityColumnDef<Subscription>({ property: 'actions', header: 'Actions', template: this.deleteTpl }),\n    ] as EntityColumnDef<Subscription>[];\n  }\n\n  // optional FIXME: remove\n  openPopUp(entity?: Subscription) {}\n  // optional\n  delete(item: Subscription) {\n    return this.confirmService.confirm('Confirm', `Delete Sub(${item.id}) for ${item.username}?`).pipe(\n      filter((confirmed) => confirmed === true),\n      mergeMap((_) => super.delete(item)),\n      tap((_) => {\n        this.snack.open('Subscription Deleted!', 'OK', { duration: 5000 });\n        this.store.dispatch(new Navigate([`/admin/subscriptions`]));\n      }),\n      catchError((error) => {\n        this.snack.open(error, 'OK', { duration: 10000 });\n        return throwError('Ignore Me!');\n      })\n    );\n  }\n\n  // optional\n  showDetails(entity: Subscription) {\n    if (entity) {\n      this.store.dispatch(new Navigate([`/admin/subscriptions/${entity.id}`]));\n    } else {\n      this.store.dispatch(new Navigate(['/admin/subscriptions']));\n    }\n  }\n}\n","import { DragDropModule } from '@angular/cdk/drag-drop';\nimport { NgModule } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { RouterModule } from '@angular/router';\nimport { FormlyModule } from '@ngx-formly/core';\nimport { FormlyMaterialModule } from '@ngx-formly/material';\nimport { AppConfirmModule } from '@ngx-starter-kit/app-confirm';\nimport { AdminGuard } from '@ngx-starter-kit/auth';\nimport { BreadcrumbsModule } from '@ngx-starter-kit/breadcrumbs';\nimport { HelperModule, TruncateModule } from '@ngx-starter-kit/ngx-utils';\nimport { QuickpanelModule } from '@ngx-starter-kit/quickpanel';\nimport { SharedModule } from '@ngx-starter-kit/shared';\nimport { ToolbarModule } from '@ngx-starter-kit/toolbar';\nimport { NotificationDetailComponent } from './components/notification-detail/notification-detail.component';\nimport { NotificationEditComponent } from './components/notification-edit/notification-edit.component';\nimport { SubscriptionDetailComponent } from './components/subscription-detail/subscription-detail.component';\nimport { AdminLayoutComponent } from './containers/admin-layout/admin-layout.component';\nimport { NotificationsComponent } from './containers/notifications/notifications.component';\nimport { OverviewComponent } from './containers/overview/overview.component';\nimport { SubscriptionsComponent } from './containers/subscriptions/subscriptions.component';\n\nconst matModules = [\n  MatCardModule,\n  MatButtonModule,\n  MatIconModule,\n  MatFormFieldModule,\n  MatInputModule,\n  MatButtonToggleModule,\n  MatMenuModule,\n  MatCheckboxModule,\n  MatToolbarModule,\n  MatProgressBarModule,\n  MatTableModule,\n  MatPaginatorModule,\n  MatDividerModule,\n  MatListModule,\n  MatDialogModule,\n  MatSidenavModule,\n  DragDropModule,\n];\n\n@NgModule({\n  imports: [\n    SharedModule,\n    BreadcrumbsModule,\n    [...matModules],\n    AppConfirmModule,\n    TruncateModule,\n    HelperModule,\n    ToolbarModule,\n    QuickpanelModule,\n    FormlyModule.forChild({}),\n    FormlyMaterialModule,\n    RouterModule.forChild([\n      /* {path: '', pathMatch: 'full', component: InsertYourComponentHere} */\n      {\n        path: '',\n        component: AdminLayoutComponent,\n        // canActivate: [AuthGuard],\n        canActivate: [AdminGuard],\n        data: { title: 'Admin', depth: 1, roles: ['ROLE_ADMIN'] },\n        children: [\n          { path: '', component: OverviewComponent, data: { title: 'Overview', depth: 2 } },\n          {\n            path: 'subscriptions',\n            component: SubscriptionsComponent,\n            data: { title: 'Subscriptions', depth: 3 },\n            children: [\n              {\n                path: ':id',\n                component: SubscriptionDetailComponent,\n                data: { title: 'Subscription Detail' },\n              },\n            ],\n          },\n          {\n            path: 'notifications',\n            component: NotificationsComponent,\n            data: { title: 'Notifications', depth: 3 },\n            children: [\n              {\n                path: ':id',\n                component: NotificationDetailComponent,\n                data: { title: 'Notification Detail' },\n              },\n            ],\n          },\n        ],\n      },\n    ]),\n  ],\n  declarations: [\n    OverviewComponent,\n    NotificationsComponent,\n    SubscriptionsComponent,\n    SubscriptionDetailComponent,\n    NotificationDetailComponent,\n    NotificationEditComponent,\n    AdminLayoutComponent,\n  ],\n})\nexport class AdminModule {}\n"]}